
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  000003bc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b7  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000396  00000000  00000000  000004b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001df  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048d  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000150  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait>:
#define SReg 0
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
  92:	9b 01       	movw	r18, r22
  94:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  96:	10 92 6c 00 	sts	0x006C, r1
  9a:	10 92 6d 00 	sts	0x006D, r1
  9e:	10 92 6e 00 	sts	0x006E, r1
  a2:	10 92 6f 00 	sts	0x006F, r1
  a6:	13 c0       	rjmp	.+38     	; 0xce <wait+0x3c>
  a8:	80 91 6c 00 	lds	r24, 0x006C
  ac:	90 91 6d 00 	lds	r25, 0x006D
  b0:	a0 91 6e 00 	lds	r26, 0x006E
  b4:	b0 91 6f 00 	lds	r27, 0x006F
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
  be:	80 93 6c 00 	sts	0x006C, r24
  c2:	90 93 6d 00 	sts	0x006D, r25
  c6:	a0 93 6e 00 	sts	0x006E, r26
  ca:	b0 93 6f 00 	sts	0x006F, r27
  ce:	80 91 6c 00 	lds	r24, 0x006C
  d2:	90 91 6d 00 	lds	r25, 0x006D
  d6:	a0 91 6e 00 	lds	r26, 0x006E
  da:	b0 91 6f 00 	lds	r27, 0x006F
  de:	82 17       	cp	r24, r18
  e0:	93 07       	cpc	r25, r19
  e2:	a4 07       	cpc	r26, r20
  e4:	b5 07       	cpc	r27, r21
  e6:	00 f3       	brcs	.-64     	; 0xa8 <wait+0x16>
}
  e8:	08 95       	ret

000000ea <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   
   DDRD = 0b00000000;
  ea:	11 ba       	out	0x11, r1	; 17

   if (vRS == 0)
  ec:	88 23       	and	r24, r24
  ee:	11 f4       	brne	.+4      	; 0xf4 <rd_LCDreg+0xa>
      clrbit(PORTB, RS); //RS = '0'
  f0:	c5 98       	cbi	0x18, 5	; 24
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <rd_LCDreg+0xc>
   else
      setbit(PORTB, RS); //RS = '1'
  f4:	c5 9a       	sbi	0x18, 5	; 24

   setbit(PORTB, RW); //RW = '1'
  f6:	c6 9a       	sbi	0x18, 6	; 24

   nop;
  f8:	00 00       	nop

   setbit(PORTB, E); //E = '1'
  fa:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 104:	00 00       	nop

   data = PIND;
 106:	80 b3       	in	r24, 0x10	; 16

   clrbit(PORTB, E); //E = '0'
 108:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 10a:	00 00       	nop

   DDRD = 0b11111111;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	91 bb       	out	0x11, r25	; 17

   return data;
}
 110:	08 95       	ret

00000112 <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if (vRS == 0)
 112:	88 23       	and	r24, r24
 114:	11 f4       	brne	.+4      	; 0x11a <wr_LCDreg+0x8>
      clrbit(PORTB, RS); //RS = '0'
 116:	c5 98       	cbi	0x18, 5	; 24
 118:	01 c0       	rjmp	.+2      	; 0x11c <wr_LCDreg+0xa>
   else
      setbit(PORTB, RS); //RS = '1'
 11a:	c5 9a       	sbi	0x18, 5	; 24

   clrbit(PORTB, RW); //RW = '0'
 11c:	c6 98       	cbi	0x18, 6	; 24

   PORTD = data;
 11e:	62 bb       	out	0x12, r22	; 18

   nop;
 120:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 122:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 12c:	00 00       	nop

   clrbit(PORTB, E); //E = '0'
 12e:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 130:	00 00       	nop
}
 132:	08 95       	ret

00000134 <ckbf>:


void ckbf(){
   
   while(rd_LCDreg(SReg) & 1<<7){}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 13a:	87 fd       	sbrc	r24, 7
 13c:	fb cf       	rjmp	.-10     	; 0x134 <ckbf>
}
 13e:	08 95       	ret

00000140 <initLCD>:

void initLCD(){
   ckbf();
 140:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 - - -
   wr_LCDreg(IReg, 0b00111000);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	68 e3       	ldi	r22, 0x38	; 56
 148:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Entry mode set
   //bit 7 6 5 4   3 2   1 0
   //    0 0 0 0   0 1 I/D S
   //    0 0 0 0   0 1   1 0
   wr_LCDreg(IReg, 0b00000110);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	66 e0       	ldi	r22, 0x06	; 6
 154:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 158:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	6f e0       	ldi	r22, 0x0F	; 15
 160:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 164:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 170:	08 95       	ret

00000172 <sysinit>:

void sysinit(){
   PORTB = 0b00000000;
 172:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100000;
 174:	80 ee       	ldi	r24, 0xE0	; 224
 176:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0b11111111;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 bb       	out	0x11, r24	; 17
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 17c:	10 92 6c 00 	sts	0x006C, r1
 180:	10 92 6d 00 	sts	0x006D, r1
 184:	10 92 6e 00 	sts	0x006E, r1
 188:	10 92 6f 00 	sts	0x006F, r1
 18c:	13 c0       	rjmp	.+38     	; 0x1b4 <sysinit+0x42>
 18e:	80 91 6c 00 	lds	r24, 0x006C
 192:	90 91 6d 00 	lds	r25, 0x006D
 196:	a0 91 6e 00 	lds	r26, 0x006E
 19a:	b0 91 6f 00 	lds	r27, 0x006F
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	a1 1d       	adc	r26, r1
 1a2:	b1 1d       	adc	r27, r1
 1a4:	80 93 6c 00 	sts	0x006C, r24
 1a8:	90 93 6d 00 	sts	0x006D, r25
 1ac:	a0 93 6e 00 	sts	0x006E, r26
 1b0:	b0 93 6f 00 	sts	0x006F, r27
 1b4:	80 91 6c 00 	lds	r24, 0x006C
 1b8:	90 91 6d 00 	lds	r25, 0x006D
 1bc:	a0 91 6e 00 	lds	r26, 0x006E
 1c0:	b0 91 6f 00 	lds	r27, 0x006F
 1c4:	80 5c       	subi	r24, 0xC0	; 192
 1c6:	94 4d       	sbci	r25, 0xD4	; 212
 1c8:	a1 40       	sbci	r26, 0x01	; 1
 1ca:	b0 40       	sbci	r27, 0x00	; 0
 1cc:	00 f3       	brcs	.-64     	; 0x18e <sysinit+0x1c>
void sysinit(){
   PORTB = 0b00000000;
   DDRB  = 0b11100000;
   DDRD  = 0b11111111;
   wait(120000UL);
   initLCD();
 1ce:	0e 94 a0 00 	call	0x140	; 0x140 <initLCD>
}
 1d2:	08 95       	ret

000001d4 <putchLCD>:

//Pasul 1
void putchLCD( char ch){
 1d4:	1f 93       	push	r17
 1d6:	18 2f       	mov	r17, r24
   ckbf();
 1d8:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, ch);
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	61 2f       	mov	r22, r17
 1e0:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <clrLCD>:
}
*/

//Pasul 3
void clrLCD(){
   ckbf();
 1e8:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 1f4:	08 95       	ret

000001f6 <gotoLC>:

//Pasul 4
void gotoLC(unsigned char line, unsigned char col){
 1f6:	1f 93       	push	r17
 1f8:	16 2f       	mov	r17, r22
   unsigned char position = 0;

   if(line == 1){
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	29 f4       	brne	.+10     	; 0x208 <gotoLC+0x12>
      position |= 1<<7;
      position |= col - 1;

      ckbf();
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   0   0   0   col col col col
      wr_LCDreg(IReg, position);
 202:	11 50       	subi	r17, 0x01	; 1
 204:	10 68       	ori	r17, 0x80	; 128
 206:	06 c0       	rjmp	.+12     	; 0x214 <gotoLC+0x1e>
   }
   else if(line == 2){
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	41 f4       	brne	.+16     	; 0x21c <gotoLC+0x26>
      position |= 1<<6 | 1<<7;
      position |= col - 1;

      ckbf();
 20c:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   1   0   0   col col col col
      wr_LCDreg(IReg, position);
 210:	11 50       	subi	r17, 0x01	; 1
 212:	10 6c       	ori	r17, 0xC0	; 192
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	61 2f       	mov	r22, r17
 218:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
   }
}
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <putsLCD>:

//Pasul 5: Wrap
void putsLCD( char* ch){
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 228:	15 e1       	ldi	r17, 0x15	; 21
 22a:	1e c0       	rjmp	.+60     	; 0x268 <putsLCD+0x48>
   while(*ch){
      ckbf();
 22c:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      wr_LCDreg(DReg, *ch++);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	68 81       	ld	r22, Y
 234:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
      
      ckbf();
 238:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
 23c:	81 2f       	mov	r24, r17
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <putsLCD+0x1e>
      _delay_us(8);

      //0x10 == 16
      if(rd_LCDreg(SReg) == 0x10)
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 248:	80 31       	cpi	r24, 0x10	; 16
 24a:	21 f4       	brne	.+8      	; 0x254 <putsLCD+0x34>
         gotoLC(2,1);
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <gotoLC>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 25a:	80 35       	cpi	r24, 0x50	; 80
 25c:	21 f4       	brne	.+8      	; 0x266 <putsLCD+0x46>
         gotoLC(1,1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <gotoLC>

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
      ckbf();
      wr_LCDreg(DReg, *ch++);
 266:	21 96       	adiw	r28, 0x01	; 1
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
 268:	88 81       	ld	r24, Y
 26a:	88 23       	and	r24, r24
 26c:	f9 f6       	brne	.-66     	; 0x22c <putsLCD+0xc>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
         gotoLC(1,1);
   }
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <smiley>:

//Pasul 6: Smiley
void smiley(){
   ckbf();
 276:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Set CGRAM address
   //bit 7 6   5   4     3   2   1   0
   //    0 1 ACG ACG   ACG ACG ACG ACG
   //    0 1   0   1     0   0   0   0
   wr_LCDreg(IReg, 0b01010000);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	60 e5       	ldi	r22, 0x50	; 80
 27e:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 282:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	60 e4       	ldi	r22, 0x40	; 64
 28a:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 28e:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001010); //line 2
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	6a e4       	ldi	r22, 0x4A	; 74
 296:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 29a:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	60 e4       	ldi	r22, 0x40	; 64
 2a2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2a6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000100); //line 4
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	64 e4       	ldi	r22, 0x44	; 68
 2ae:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2b2:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01010001); //line 5
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	61 e5       	ldi	r22, 0x51	; 81
 2ba:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2be:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001110); //line 6
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	6e e4       	ldi	r22, 0x4E	; 78
 2c6:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2ca:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 7
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	60 e4       	ldi	r22, 0x40	; 64
 2d2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2d6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 8
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	60 e4       	ldi	r22, 0x40	; 64
 2de:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

}
 2e2:	08 95       	ret

000002e4 <main>:

int main(){

   //unsigned char k;

   sysinit();
 2e4:	0e 94 b9 00 	call	0x172	; 0x172 <sysinit>
   //Pasul 1
   //putchLCD('H');

   //Pasul 2
   //putsLCD("Hello Micro");
   smiley();
 2e8:	0e 94 3b 01 	call	0x276	; 0x276 <smiley>
   
   while(1){

      //Pasul 6
      clrLCD();
 2ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <clrLCD>
      wait(S2);
 2f0:	60 e9       	ldi	r22, 0x90	; 144
 2f2:	70 ed       	ldi	r23, 0xD0	; 208
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 49 00 	call	0x92	; 0x92 <wait>
      putchLCD(2);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <putchLCD>
      putsLCD(" is Smiley!");
 302:	80 e6       	ldi	r24, 0x60	; 96
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 10 01 	call	0x220	; 0x220 <putsLCD>
      wait(S2);      
 30a:	60 e9       	ldi	r22, 0x90	; 144
 30c:	70 ed       	ldi	r23, 0xD0	; 208
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 49 00 	call	0x92	; 0x92 <wait>
 316:	ea cf       	rjmp	.-44     	; 0x2ec <main+0x8>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
