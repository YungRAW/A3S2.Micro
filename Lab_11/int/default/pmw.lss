
pmw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000ae  008000ae  00000abc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000107  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000611  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e5  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000202  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
  8a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait>:
#define SReg 0
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
  92:	9b 01       	movw	r18, r22
  94:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  96:	10 92 b3 00 	sts	0x00B3, r1
  9a:	10 92 b4 00 	sts	0x00B4, r1
  9e:	10 92 b5 00 	sts	0x00B5, r1
  a2:	10 92 b6 00 	sts	0x00B6, r1
  a6:	13 c0       	rjmp	.+38     	; 0xce <wait+0x3c>
  a8:	80 91 b3 00 	lds	r24, 0x00B3
  ac:	90 91 b4 00 	lds	r25, 0x00B4
  b0:	a0 91 b5 00 	lds	r26, 0x00B5
  b4:	b0 91 b6 00 	lds	r27, 0x00B6
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
  be:	80 93 b3 00 	sts	0x00B3, r24
  c2:	90 93 b4 00 	sts	0x00B4, r25
  c6:	a0 93 b5 00 	sts	0x00B5, r26
  ca:	b0 93 b6 00 	sts	0x00B6, r27
  ce:	80 91 b3 00 	lds	r24, 0x00B3
  d2:	90 91 b4 00 	lds	r25, 0x00B4
  d6:	a0 91 b5 00 	lds	r26, 0x00B5
  da:	b0 91 b6 00 	lds	r27, 0x00B6
  de:	82 17       	cp	r24, r18
  e0:	93 07       	cpc	r25, r19
  e2:	a4 07       	cpc	r26, r20
  e4:	b5 07       	cpc	r27, r21
  e6:	00 f3       	brcs	.-64     	; 0xa8 <wait+0x16>
}
  e8:	08 95       	ret

000000ea <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   
   DDRD = 0b00000000;
  ea:	11 ba       	out	0x11, r1	; 17

   if (vRS == 0)
  ec:	88 23       	and	r24, r24
  ee:	11 f4       	brne	.+4      	; 0xf4 <rd_LCDreg+0xa>
      clrbit(PORTB, RS); //RS = '0'
  f0:	c5 98       	cbi	0x18, 5	; 24
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <rd_LCDreg+0xc>
   else
      setbit(PORTB, RS); //RS = '1'
  f4:	c5 9a       	sbi	0x18, 5	; 24

   setbit(PORTB, RW); //RW = '1'
  f6:	c6 9a       	sbi	0x18, 6	; 24

   nop;
  f8:	00 00       	nop

   setbit(PORTB, E); //E = '1'
  fa:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 104:	00 00       	nop

   data = PIND;
 106:	80 b3       	in	r24, 0x10	; 16

   clrbit(PORTB, E); //E = '0'
 108:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 10a:	00 00       	nop

   DDRD = 0b11111111;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	91 bb       	out	0x11, r25	; 17

   return data;
}
 110:	08 95       	ret

00000112 <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if (vRS == 0)
 112:	88 23       	and	r24, r24
 114:	11 f4       	brne	.+4      	; 0x11a <wr_LCDreg+0x8>
      clrbit(PORTB, RS); //RS = '0'
 116:	c5 98       	cbi	0x18, 5	; 24
 118:	01 c0       	rjmp	.+2      	; 0x11c <wr_LCDreg+0xa>
   else
      setbit(PORTB, RS); //RS = '1'
 11a:	c5 9a       	sbi	0x18, 5	; 24

   clrbit(PORTB, RW); //RW = '0'
 11c:	c6 98       	cbi	0x18, 6	; 24

   PORTD = data;
 11e:	62 bb       	out	0x12, r22	; 18

   nop;
 120:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 122:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 12c:	00 00       	nop

   clrbit(PORTB, E); //E = '0'
 12e:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 130:	00 00       	nop
}
 132:	08 95       	ret

00000134 <ckbf>:


void ckbf(){
   
   while(rd_LCDreg(SReg) & 1<<7){}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 13a:	87 fd       	sbrc	r24, 7
 13c:	fb cf       	rjmp	.-10     	; 0x134 <ckbf>
}
 13e:	08 95       	ret

00000140 <initLCD>:

void initLCD(){
   ckbf();
 140:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 - - -
   wr_LCDreg(IReg, 0b00111000);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	68 e3       	ldi	r22, 0x38	; 56
 148:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Entry mode set
   //bit 7 6 5 4   3 2   1 0
   //    0 0 0 0   0 1 I/D S
   //    0 0 0 0   0 1   1 0
   wr_LCDreg(IReg, 0b00000110);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	66 e0       	ldi	r22, 0x06	; 6
 154:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 158:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	6f e0       	ldi	r22, 0x0F	; 15
 160:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 164:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 170:	08 95       	ret

00000172 <sysinit>:

void sysinit(){
   PORTB = 0b00000000;
 172:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100010;
 174:	82 ee       	ldi	r24, 0xE2	; 226
 176:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0b11111111;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 bb       	out	0x11, r24	; 17
   PORTA = 0;
 17c:	1b ba       	out	0x1b, r1	; 27
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 17e:	10 92 b3 00 	sts	0x00B3, r1
 182:	10 92 b4 00 	sts	0x00B4, r1
 186:	10 92 b5 00 	sts	0x00B5, r1
 18a:	10 92 b6 00 	sts	0x00B6, r1
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <sysinit+0x44>
 190:	80 91 b3 00 	lds	r24, 0x00B3
 194:	90 91 b4 00 	lds	r25, 0x00B4
 198:	a0 91 b5 00 	lds	r26, 0x00B5
 19c:	b0 91 b6 00 	lds	r27, 0x00B6
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	a1 1d       	adc	r26, r1
 1a4:	b1 1d       	adc	r27, r1
 1a6:	80 93 b3 00 	sts	0x00B3, r24
 1aa:	90 93 b4 00 	sts	0x00B4, r25
 1ae:	a0 93 b5 00 	sts	0x00B5, r26
 1b2:	b0 93 b6 00 	sts	0x00B6, r27
 1b6:	80 91 b3 00 	lds	r24, 0x00B3
 1ba:	90 91 b4 00 	lds	r25, 0x00B4
 1be:	a0 91 b5 00 	lds	r26, 0x00B5
 1c2:	b0 91 b6 00 	lds	r27, 0x00B6
 1c6:	80 5c       	subi	r24, 0xC0	; 192
 1c8:	94 4d       	sbci	r25, 0xD4	; 212
 1ca:	a1 40       	sbci	r26, 0x01	; 1
 1cc:	b0 40       	sbci	r27, 0x00	; 0
 1ce:	00 f3       	brcs	.-64     	; 0x190 <sysinit+0x1e>
   PORTB = 0b00000000;
   DDRB  = 0b11100010;
   DDRD  = 0b11111111;
   PORTA = 0;
   wait(120000UL);
   initLCD();
 1d0:	0e 94 a0 00 	call	0x140	; 0x140 <initLCD>
}
 1d4:	08 95       	ret

000001d6 <clrLCD>:
}
*/

//Pasul 3
void clrLCD(){
   ckbf();
 1d6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 1e2:	08 95       	ret

000001e4 <gotoLC>:

//Pasul 4
void gotoLC(unsigned char line, unsigned char col){
 1e4:	1f 93       	push	r17
 1e6:	16 2f       	mov	r17, r22
   unsigned char position = 0;

   if(line == 1 && col < 17){
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <gotoLC+0x16>
 1ec:	61 31       	cpi	r22, 0x11	; 17
 1ee:	88 f4       	brcc	.+34     	; 0x212 <gotoLC+0x2e>
      position |= 1<<7;
      position |= col - 1;

      ckbf();
 1f0:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   0   0   0   col col col col
      wr_LCDreg(IReg, position);
 1f4:	11 50       	subi	r17, 0x01	; 1
 1f6:	10 68       	ori	r17, 0x80	; 128
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <gotoLC+0x26>
   }
   else if(line == 2 && col < 17){
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	51 f4       	brne	.+20     	; 0x212 <gotoLC+0x2e>
 1fe:	61 31       	cpi	r22, 0x11	; 17
 200:	40 f4       	brcc	.+16     	; 0x212 <gotoLC+0x2e>
      position |= 1<<6 | 1<<7;
      position |= col - 1;

      ckbf();
 202:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   1   0   0   col col col col
      wr_LCDreg(IReg, position);
 206:	11 50       	subi	r17, 0x01	; 1
 208:	10 6c       	ori	r17, 0xC0	; 192
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	61 2f       	mov	r22, r17
 20e:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
   }
}
 212:	1f 91       	pop	r17
 214:	08 95       	ret

00000216 <putchLCD>:
   wait(120000UL);
   initLCD();
}

//Pasul 1
void putchLCD( char ch){
 216:	1f 93       	push	r17
 218:	18 2f       	mov	r17, r24
   ckbf();
 21a:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, ch);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	61 2f       	mov	r22, r17
 222:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 226:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22a:	85 e1       	ldi	r24, 0x15	; 21
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <putchLCD+0x16>
   _delay_us(8);

   //0x10 == 16
   if(rd_LCDreg(SReg) == 0x10)
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 236:	80 31       	cpi	r24, 0x10	; 16
 238:	21 f4       	brne	.+8      	; 0x242 <putchLCD+0x2c>
      gotoLC(2,1);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

   //0x50 == 80
   if(rd_LCDreg(SReg) == 0x50)
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 248:	80 35       	cpi	r24, 0x50	; 80
 24a:	21 f4       	brne	.+8      	; 0x254 <putchLCD+0x3e>
      gotoLC(1,1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
}
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <putsLCD>:
      wr_LCDreg(IReg, position);
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	15 e1       	ldi	r17, 0x15	; 21
 262:	1e c0       	rjmp	.+60     	; 0x2a0 <putsLCD+0x48>
   while(*ch){
      ckbf();
 264:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      wr_LCDreg(DReg, *ch++);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	68 81       	ld	r22, Y
 26c:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
      
      ckbf();
 270:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
 274:	81 2f       	mov	r24, r17
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <putsLCD+0x1e>
      _delay_us(8);

      //0x10 == 16
      if(rd_LCDreg(SReg) == 0x10)
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 280:	80 31       	cpi	r24, 0x10	; 16
 282:	21 f4       	brne	.+8      	; 0x28c <putsLCD+0x34>
         gotoLC(2,1);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 292:	80 35       	cpi	r24, 0x50	; 80
 294:	21 f4       	brne	.+8      	; 0x29e <putsLCD+0x46>
         gotoLC(1,1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
      ckbf();
      wr_LCDreg(DReg, *ch++);
 29e:	21 96       	adiw	r28, 0x01	; 1
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	f9 f6       	brne	.-66     	; 0x264 <putsLCD+0xc>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
         gotoLC(1,1);
   }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <smiley>:

//Pasul 6: Smiley
void smiley(){
   ckbf();
 2ae:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Set CGRAM address
   //bit 7 6   5   4     3   2   1   0
   //    0 1 ACG ACG   ACG ACG ACG ACG
   //    0 1   0   1     0   0   0   0
   wr_LCDreg(IReg, 0b01010000);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	60 e5       	ldi	r22, 0x50	; 80
 2b6:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2ba:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	60 e4       	ldi	r22, 0x40	; 64
 2c2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2c6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001010); //line 2
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	6a e4       	ldi	r22, 0x4A	; 74
 2ce:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2d2:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 3
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	60 e4       	ldi	r22, 0x40	; 64
 2da:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2de:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000100); //line 4
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	64 e4       	ldi	r22, 0x44	; 68
 2e6:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2ea:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01010001); //line 5
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	61 e5       	ldi	r22, 0x51	; 81
 2f2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2f6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001110); //line 6
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	6e e4       	ldi	r22, 0x4E	; 78
 2fe:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 302:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 7
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	60 e4       	ldi	r22, 0x40	; 64
 30a:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 30e:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 8
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	60 e4       	ldi	r22, 0x40	; 64
 316:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 31a:	08 95       	ret

0000031c <kbscan>:

char kbscan(){
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	61 97       	sbiw	r28, 0x11	; 17
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	0c c0       	rjmp	.+24     	; 0x34c <kbscan+0x30>
	...
      nop; nop; nop; nop; nop; nop;

      cols = ~PINA;
 340:	29 b3       	in	r18, 0x19	; 25
 342:	20 95       	com	r18

      cols &= 0x0f;
 344:	2f 70       	andi	r18, 0x0F	; 15

      if (cols != 0)
 346:	51 f4       	brne	.+20     	; 0x35c <kbscan+0x40>
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 348:	8a b3       	in	r24, 0x1a	; 26
 34a:	88 0f       	add	r24, r24
 34c:	8a bb       	out	0x1a, r24	; 26
 34e:	8a b3       	in	r24, 0x1a	; 26
 350:	88 23       	and	r24, r24
 352:	81 f7       	brne	.-32     	; 0x334 <kbscan+0x18>
      if (cols != 0)
         break;
   }//end for

   if (cols == 0){
      PORTB &= 0<<1;
 354:	88 b3       	in	r24, 0x18	; 24
 356:	18 ba       	out	0x18, r1	; 24
 358:	8f e7       	ldi	r24, 0x7F	; 127
 35a:	35 c0       	rjmp	.+106    	; 0x3c6 <kbscan+0xaa>
      return NOKEY;
   }

   temp = DDRA;
 35c:	3a b3       	in	r19, 0x1a	; 26

   if (temp & 1<<4)
 35e:	83 2f       	mov	r24, r19
 360:	90 e0       	ldi	r25, 0x00	; 0
      lia = 0;

   if (temp & 1<<5)
      lia = 1;

   if (temp & 1<<6)
 362:	36 ff       	sbrs	r19, 6
 364:	02 c0       	rjmp	.+4      	; 0x36a <kbscan+0x4e>
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	07 c0       	rjmp	.+14     	; 0x378 <kbscan+0x5c>
 36a:	45 e0       	ldi	r20, 0x05	; 5
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	4a 95       	dec	r20
 372:	e1 f7       	brne	.-8      	; 0x36c <kbscan+0x50>
 374:	98 2f       	mov	r25, r24
 376:	91 70       	andi	r25, 0x01	; 1
      lia = 2;

   if (temp & 1<<7)
 378:	37 fd       	sbrc	r19, 7
 37a:	93 e0       	ldi	r25, 0x03	; 3
      lia = 3;

   if (cols & 1<<0){
 37c:	20 fd       	sbrc	r18, 0
 37e:	0c c0       	rjmp	.+24     	; 0x398 <kbscan+0x7c>
      cola = 0;
   }
   else if (cols & 1<<1){
 380:	21 ff       	sbrs	r18, 1
 382:	02 c0       	rjmp	.+4      	; 0x388 <kbscan+0x6c>
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	09 c0       	rjmp	.+18     	; 0x39a <kbscan+0x7e>
      cola = 1;
   }
   else if (cols & 1<<2){
 388:	22 ff       	sbrs	r18, 2
 38a:	02 c0       	rjmp	.+4      	; 0x390 <kbscan+0x74>
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	05 c0       	rjmp	.+10     	; 0x39a <kbscan+0x7e>
      cola = 2;
   }
   else if (cols & 1<<3){
 390:	23 ff       	sbrs	r18, 3
 392:	02 c0       	rjmp	.+4      	; 0x398 <kbscan+0x7c>
 394:	23 e0       	ldi	r18, 0x03	; 3
 396:	01 c0       	rjmp	.+2      	; 0x39a <kbscan+0x7e>
 398:	20 e0       	ldi	r18, 0x00	; 0
   unsigned char lia=0;  //linia activa
   unsigned char cola=0; //coloana activa 
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 39a:	de 01       	movw	r26, r28
 39c:	11 96       	adiw	r26, 0x01	; 1
 39e:	e0 e6       	ldi	r30, 0x60	; 96
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	81 e1       	ldi	r24, 0x11	; 17
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <kbscan+0x88>
      cola = 3;
   }

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];
 3ac:	99 0f       	add	r25, r25
 3ae:	99 0f       	add	r25, r25
 3b0:	92 0f       	add	r25, r18
 3b2:	fe 01       	movw	r30, r28
 3b4:	e9 0f       	add	r30, r25
 3b6:	f1 1d       	adc	r31, r1
 3b8:	81 81       	ldd	r24, Z+1	; 0x01

   while(cod_extern == '*' || cod_extern == '#'){
 3ba:	8a 32       	cpi	r24, 0x2A	; 42
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <kbscan+0xa6>
      PORTB |= 0x02;
 3be:	c1 9a       	sbi	0x18, 1	; 24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <kbscan+0xaa>

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];

   while(cod_extern == '*' || cod_extern == '#'){
 3c2:	83 32       	cpi	r24, 0x23	; 35
 3c4:	e1 f3       	breq	.-8      	; 0x3be <kbscan+0xa2>
      PORTB |= 0x02;
      return cod_extern;
   }

   return cod_extern;
}//end kbscan
 3c6:	61 96       	adiw	r28, 0x11	; 17
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <__vector_3>:

   }//PWM end
   loop_cnt++;
}

ISR(TIMER2_COMP_vect){
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31

   static unsigned int cycles = 0;

   cycles++;
 3fa:	80 91 af 00 	lds	r24, 0x00AF
 3fe:	90 91 b0 00 	lds	r25, 0x00B0
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 b0 00 	sts	0x00B0, r25
 408:	80 93 af 00 	sts	0x00AF, r24

   if(cycles == 125){
 40c:	8d 37       	cpi	r24, 0x7D	; 125
 40e:	91 05       	cpc	r25, r1
 410:	09 f0       	breq	.+2      	; 0x414 <__vector_3+0x3c>
 412:	8d c0       	rjmp	.+282    	; 0x52e <__stack+0xcf>
      cycles = 0;
 414:	10 92 b0 00 	sts	0x00B0, r1
 418:	10 92 af 00 	sts	0x00AF, r1
      s++;
 41c:	80 91 a8 00 	lds	r24, 0x00A8
 420:	90 91 a9 00 	lds	r25, 0x00A9
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	90 93 a9 00 	sts	0x00A9, r25
 42a:	80 93 a8 00 	sts	0x00A8, r24

      if(s > 59){
 42e:	cc 97       	sbiw	r24, 0x3c	; 60
 430:	68 f0       	brcs	.+26     	; 0x44c <__vector_3+0x74>
         s = 0;
 432:	10 92 a9 00 	sts	0x00A9, r1
 436:	10 92 a8 00 	sts	0x00A8, r1
         m++;
 43a:	80 91 a6 00 	lds	r24, 0x00A6
 43e:	90 91 a7 00 	lds	r25, 0x00A7
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	90 93 a7 00 	sts	0x00A7, r25
 448:	80 93 a6 00 	sts	0x00A6, r24
      }

      if(m > 59){
 44c:	80 91 a6 00 	lds	r24, 0x00A6
 450:	90 91 a7 00 	lds	r25, 0x00A7
 454:	cc 97       	sbiw	r24, 0x3c	; 60
 456:	68 f0       	brcs	.+26     	; 0x472 <__stack+0x13>
         m = 0;
 458:	10 92 a7 00 	sts	0x00A7, r1
 45c:	10 92 a6 00 	sts	0x00A6, r1
         h++;
 460:	80 91 a4 00 	lds	r24, 0x00A4
 464:	90 91 a5 00 	lds	r25, 0x00A5
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	90 93 a5 00 	sts	0x00A5, r25
 46e:	80 93 a4 00 	sts	0x00A4, r24
      }

      if(h > 23){
 472:	80 91 a4 00 	lds	r24, 0x00A4
 476:	90 91 a5 00 	lds	r25, 0x00A5
 47a:	48 97       	sbiw	r24, 0x18	; 24
 47c:	20 f0       	brcs	.+8      	; 0x486 <__stack+0x27>
         h = 0;
 47e:	10 92 a5 00 	sts	0x00A5, r1
 482:	10 92 a4 00 	sts	0x00A4, r1
      }

      gotoLC(2,1);
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
      if( (h / 10) != 0 ){
 48e:	80 91 a4 00 	lds	r24, 0x00A4
 492:	90 91 a5 00 	lds	r25, 0x00A5
 496:	8a 30       	cpi	r24, 0x0A	; 10
 498:	91 05       	cpc	r25, r1
 49a:	38 f0       	brcs	.+14     	; 0x4aa <__stack+0x4b>
         putchLCD(h / 10 + 48);
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 4a4:	86 2f       	mov	r24, r22
 4a6:	80 5d       	subi	r24, 0xD0	; 208
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__stack+0x4d>
      }
      else{
         putchLCD(' ');
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      }

      putchLCD(h % 10 + 48);
 4b0:	80 91 a4 00 	lds	r24, 0x00A4
 4b4:	90 91 a5 00 	lds	r25, 0x00A5
 4b8:	6a e0       	ldi	r22, 0x0A	; 10
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 4c0:	80 5d       	subi	r24, 0xD0	; 208
 4c2:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(':');
 4c6:	8a e3       	ldi	r24, 0x3A	; 58
 4c8:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(m / 10 + 48);
 4cc:	80 91 a6 00 	lds	r24, 0x00A6
 4d0:	90 91 a7 00 	lds	r25, 0x00A7
 4d4:	6a e0       	ldi	r22, 0x0A	; 10
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 4dc:	86 2f       	mov	r24, r22
 4de:	80 5d       	subi	r24, 0xD0	; 208
 4e0:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(m % 10 + 48);
 4e4:	80 91 a6 00 	lds	r24, 0x00A6
 4e8:	90 91 a7 00 	lds	r25, 0x00A7
 4ec:	6a e0       	ldi	r22, 0x0A	; 10
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 4f4:	80 5d       	subi	r24, 0xD0	; 208
 4f6:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(':');
 4fa:	8a e3       	ldi	r24, 0x3A	; 58
 4fc:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(s / 10 + 48);
 500:	80 91 a8 00 	lds	r24, 0x00A8
 504:	90 91 a9 00 	lds	r25, 0x00A9
 508:	6a e0       	ldi	r22, 0x0A	; 10
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 510:	86 2f       	mov	r24, r22
 512:	80 5d       	subi	r24, 0xD0	; 208
 514:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
      putchLCD(s % 10 + 48);
 518:	80 91 a8 00 	lds	r24, 0x00A8
 51c:	90 91 a9 00 	lds	r25, 0x00A9
 520:	6a e0       	ldi	r22, 0x0A	; 10
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 528:	80 5d       	subi	r24, 0xD0	; 208
 52a:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
   }//end if
}//end ISR
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_9>:
      }// end c pitagoreic      
   }//end while
}//end main


ISR(TIMER0_OVF_vect){
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
 576:	df 93       	push	r29
 578:	cf 93       	push	r28
 57a:	00 d0       	rcall	.+0      	; 0x57c <__vector_9+0x2c>
 57c:	00 d0       	rcall	.+0      	; 0x57e <__vector_9+0x2e>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
   static unsigned char loop_cnt = 0;

   static int lumi = 50;
   char buf_lumi[4];

   if(loop_cnt==4){ //4 sau altã valoare
 582:	80 91 b1 00 	lds	r24, 0x00B1
 586:	84 30       	cpi	r24, 0x04	; 4
 588:	b1 f4       	brne	.+44     	; 0x5b6 <__vector_9+0x66>
      loop_cnt=0;
 58a:	10 92 b1 00 	sts	0x00B1, r1
      code_ante = code_now;
 58e:	80 91 ac 00 	lds	r24, 0x00AC
 592:	80 93 b2 00 	sts	0x00B2, r24
      code_now = kbscan();
 596:	0e 94 8e 01 	call	0x31c	; 0x31c <kbscan>
 59a:	98 2f       	mov	r25, r24
 59c:	80 93 ac 00 	sts	0x00AC, r24

      if( code_ante == NOKEY && code_now != NOKEY){
 5a0:	80 91 b2 00 	lds	r24, 0x00B2
 5a4:	8f 37       	cpi	r24, 0x7F	; 127
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <__vector_9+0x66>
 5a8:	9f 37       	cpi	r25, 0x7F	; 127
 5aa:	29 f0       	breq	.+10     	; 0x5b6 <__vector_9+0x66>
         kbhit=1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 ae 00 	sts	0x00AE, r24
         kbcode=code_now;
 5b2:	90 93 b7 00 	sts	0x00B7, r25
      }
   }

   //PWM start
   if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
 5b6:	80 91 ae 00 	lds	r24, 0x00AE
 5ba:	88 23       	and	r24, r24
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <__vector_9+0x70>
 5be:	62 c0       	rjmp	.+196    	; 0x684 <__vector_9+0x134>
 5c0:	80 91 b7 00 	lds	r24, 0x00B7
 5c4:	83 34       	cpi	r24, 0x43	; 67
 5c6:	29 f0       	breq	.+10     	; 0x5d2 <__vector_9+0x82>
 5c8:	80 91 b7 00 	lds	r24, 0x00B7
 5cc:	84 34       	cpi	r24, 0x44	; 68
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__vector_9+0x82>
 5d0:	59 c0       	rjmp	.+178    	; 0x684 <__vector_9+0x134>
      kbhit = 0;
 5d2:	10 92 ae 00 	sts	0x00AE, r1

      if(kbcode == 'C'){
 5d6:	80 91 b7 00 	lds	r24, 0x00B7
 5da:	83 34       	cpi	r24, 0x43	; 67
 5dc:	91 f4       	brne	.+36     	; 0x602 <__vector_9+0xb2>
         //lumi=//...creste luminozitatea
         lumi += 5;
 5de:	80 91 aa 00 	lds	r24, 0x00AA
 5e2:	90 91 ab 00 	lds	r25, 0x00AB
 5e6:	05 96       	adiw	r24, 0x05	; 5
 5e8:	90 93 ab 00 	sts	0x00AB, r25
 5ec:	80 93 aa 00 	sts	0x00AA, r24
         
         if(lumi > 100){
 5f0:	85 36       	cpi	r24, 0x65	; 101
 5f2:	91 05       	cpc	r25, r1
 5f4:	34 f0       	brlt	.+12     	; 0x602 <__vector_9+0xb2>
            lumi = 100;
 5f6:	84 e6       	ldi	r24, 0x64	; 100
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	90 93 ab 00 	sts	0x00AB, r25
 5fe:	80 93 aa 00 	sts	0x00AA, r24
         }
      }

      if(kbcode == 'D'){
 602:	80 91 b7 00 	lds	r24, 0x00B7
 606:	84 34       	cpi	r24, 0x44	; 68
 608:	79 f4       	brne	.+30     	; 0x628 <__vector_9+0xd8>
         //lumi=//...scade luminozitatea
         lumi -= 5;
 60a:	80 91 aa 00 	lds	r24, 0x00AA
 60e:	90 91 ab 00 	lds	r25, 0x00AB
 612:	05 97       	sbiw	r24, 0x05	; 5
 614:	90 93 ab 00 	sts	0x00AB, r25
 618:	80 93 aa 00 	sts	0x00AA, r24

         if(lumi < 0){
 61c:	97 ff       	sbrs	r25, 7
 61e:	04 c0       	rjmp	.+8      	; 0x628 <__vector_9+0xd8>
            lumi = 0;
 620:	10 92 ab 00 	sts	0x00AB, r1
 624:	10 92 aa 00 	sts	0x00AA, r1

      //lumi% duty cycle. Se aplica regula de 3 simpla
      //100.......255
      //lumi......x
      //x = 255 * lumi / 100
      OCR0 = (255 * lumi) / 100;
 628:	20 91 aa 00 	lds	r18, 0x00AA
 62c:	30 91 ab 00 	lds	r19, 0x00AB
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	ac 01       	movw	r20, r24
 636:	24 9f       	mul	r18, r20
 638:	c0 01       	movw	r24, r0
 63a:	25 9f       	mul	r18, r21
 63c:	90 0d       	add	r25, r0
 63e:	34 9f       	mul	r19, r20
 640:	90 0d       	add	r25, r0
 642:	11 24       	eor	r1, r1
 644:	64 e6       	ldi	r22, 0x64	; 100
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	0e 94 81 04 	call	0x902	; 0x902 <__divmodhi4>
 64c:	6c bf       	out	0x3c, r22	; 60
      gotoLC(2,11);
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	6b e0       	ldi	r22, 0x0B	; 11
 652:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
      putsLCD("L=");
 656:	81 e7       	ldi	r24, 0x71	; 113
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
      itoa(lumi, buf_lumi, 10);
 65e:	80 91 aa 00 	lds	r24, 0x00AA
 662:	90 91 ab 00 	lds	r25, 0x00AB
 666:	8e 01       	movw	r16, r28
 668:	0f 5f       	subi	r16, 0xFF	; 255
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	b8 01       	movw	r22, r16
 66e:	4a e0       	ldi	r20, 0x0A	; 10
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	0e 94 b2 04 	call	0x964	; 0x964 <itoa>
      putsLCD(buf_lumi);
 676:	c8 01       	movw	r24, r16
 678:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
      putsLCD("%  " );
 67c:	84 e7       	ldi	r24, 0x74	; 116
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>

   }//PWM end
   loop_cnt++;
 684:	80 91 b1 00 	lds	r24, 0x00B1
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 b1 00 	sts	0x00B1, r24
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	ff 91       	pop	r31
 69c:	ef 91       	pop	r30
 69e:	bf 91       	pop	r27
 6a0:	af 91       	pop	r26
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	7f 91       	pop	r23
 6a8:	6f 91       	pop	r22
 6aa:	5f 91       	pop	r21
 6ac:	4f 91       	pop	r20
 6ae:	3f 91       	pop	r19
 6b0:	2f 91       	pop	r18
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <main>:

volatile unsigned char kbhit=0, kbcode;

unsigned int h = 23, m = 59, s = 50;

int main(){
 6c0:	2f 92       	push	r2
 6c2:	3f 92       	push	r3
 6c4:	4f 92       	push	r4
 6c6:	5f 92       	push	r5
 6c8:	6f 92       	push	r6
 6ca:	7f 92       	push	r7
 6cc:	8f 92       	push	r8
 6ce:	9f 92       	push	r9
 6d0:	af 92       	push	r10
 6d2:	bf 92       	push	r11
 6d4:	cf 92       	push	r12
 6d6:	df 92       	push	r13
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	df 93       	push	r29
 6e2:	cf 93       	push	r28
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	61 97       	sbiw	r28, 0x11	; 17
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
   char buf_pit[4];
   unsigned long int a,b,c;

   unsigned char pitagoreic = 0;

   char msg_busy[] = "Busy... ";
 6f4:	de 01       	movw	r26, r28
 6f6:	15 96       	adiw	r26, 0x05	; 5
 6f8:	eb e9       	ldi	r30, 0x9B	; 155
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	89 e0       	ldi	r24, 0x09	; 9
 6fe:	01 90       	ld	r0, Z+
 700:	0d 92       	st	X+, r0
 702:	81 50       	subi	r24, 0x01	; 1
 704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x3e>

   sysinit();
 706:	0e 94 b9 00 	call	0x172	; 0x172 <sysinit>
   
   //bit 7 - FOC0 nu se programeaza, ramne 0
   //bits 3,6 - WGM01 si WGM00 = 11, adica mod CTC
   //bits 5:4 - COM01 si COM00 = 10
   //bits 2:0 - CS02, CS01 si CS00 = 100, adica clk/256 (de la prescaler)
   TCCR0 = 0b01101100;
 70a:	8c e6       	ldi	r24, 0x6C	; 108
 70c:	83 bf       	out	0x33, r24	; 51

   //bit 7 - FOC2 nu se programeaza, ramne 0
   //bits 3,6 - WGM21 si WGM20 = 10, adica mod CTC
   //bits 5:4 - COM21 si COM20 nu se programeaza, raman 0
   //bits 2:0 - CS22, CS21 si CS20 = 110, adica clk/256 (de la prescaler)
   TCCR2 = 0b00001110;
 70e:	8e e0       	ldi	r24, 0x0E	; 14
 710:	85 bd       	out	0x25, r24	; 37

   OCR0 = 128; //50% duty cycle
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	8c bf       	out	0x3c, r24	; 60
   OCR2 = 250 - 1;
 716:	89 ef       	ldi	r24, 0xF9	; 249
 718:	83 bd       	out	0x23, r24	; 35

   setbit (DDRB, 3); //OC0 pin is output
 71a:	bb 9a       	sbi	0x17, 3	; 23

   setbit(TIMSK, TOIE0); //am demascat cerea de intrerupere TOV0
 71c:	89 b7       	in	r24, 0x39	; 57
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	89 bf       	out	0x39, r24	; 57
   setbit(TIMSK, OCIE2); //am demascat cerea de intrerupere OCF2
 722:	89 b7       	in	r24, 0x39	; 57
 724:	80 68       	ori	r24, 0x80	; 128
 726:	89 bf       	out	0x39, r24	; 57
   setbit(SREG, IFLAG); //pentru a demasca intreruperea procesorului
 728:	8f b7       	in	r24, 0x3f	; 63
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	8f bf       	out	0x3f, r24	; 63
 72e:	91 e0       	ldi	r25, 0x01	; 1
   
   while(1){

	  //c pitagoreic start
      if( kbhit && kbcode>='0' && kbcode<='9'){
 730:	80 91 ae 00 	lds	r24, 0x00AE
 734:	88 23       	and	r24, r24
 736:	e1 f3       	breq	.-8      	; 0x730 <main+0x70>
 738:	80 91 b7 00 	lds	r24, 0x00B7
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	c0 f3       	brcs	.-16     	; 0x730 <main+0x70>
 740:	80 91 b7 00 	lds	r24, 0x00B7
 744:	8a 33       	cpi	r24, 0x3A	; 58
 746:	a0 f7       	brcc	.-24     	; 0x730 <main+0x70>
         kbhit=0;
 748:	10 92 ae 00 	sts	0x00AE, r1

         switch(stare){
 74c:	92 30       	cpi	r25, 0x02	; 2
 74e:	c9 f0       	breq	.+50     	; 0x782 <main+0xc2>
 750:	93 30       	cpi	r25, 0x03	; 3
 752:	21 f1       	breq	.+72     	; 0x79c <main+0xdc>
 754:	91 30       	cpi	r25, 0x01	; 1
 756:	61 f7       	brne	.-40     	; 0x730 <main+0x70>
         	case C1:   //cifra 0
               gotoLC(1, 1);
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putsLCD("                ");
 760:	88 e7       	ldi	r24, 0x78	; 120
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
               gotoLC(1, 1);
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               buf_pit[0]=kbcode;
 770:	80 91 b7 00 	lds	r24, 0x00B7
 774:	89 83       	std	Y+1, r24	; 0x01
               putchLCD(kbcode); //scrie prima cifra
 776:	80 91 b7 00 	lds	r24, 0x00B7
 77a:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
 77e:	92 e0       	ldi	r25, 0x02	; 2
 780:	d7 cf       	rjmp	.-82     	; 0x730 <main+0x70>
               stare=C2;
               break;

            case C2:
               buf_pit[1]=kbcode;
 782:	80 91 b7 00 	lds	r24, 0x00B7
 786:	8a 83       	std	Y+2, r24	; 0x02
               gotoLC(1,2);
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putchLCD(kbcode); //scrie a doua cifra
 790:	80 91 b7 00 	lds	r24, 0x00B7
 794:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
 798:	93 e0       	ldi	r25, 0x03	; 3
 79a:	ca cf       	rjmp	.-108    	; 0x730 <main+0x70>
               stare=C3;
               break;
         
            case C3:
               buf_pit[2]=kbcode;
 79c:	80 91 b7 00 	lds	r24, 0x00B7
 7a0:	8b 83       	std	Y+3, r24	; 0x03
               buf_pit[3]='\0';
 7a2:	1c 82       	std	Y+4, r1	; 0x04
               gotoLC(1,3);
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	63 e0       	ldi	r22, 0x03	; 3
 7a8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putchLCD(kbcode); //scrie a treia cifra
 7ac:	80 91 b7 00 	lds	r24, 0x00B7
 7b0:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
               gotoLC(1,8);
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	68 e0       	ldi	r22, 0x08	; 8
 7b8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
 7bc:	8e 01       	movw	r16, r28
 7be:	0b 5f       	subi	r16, 0xFB	; 251
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	08 c0       	rjmp	.+16     	; 0x7d4 <main+0x114>
               for(int i=0; msg_busy[i] != 0; i++){
                  putchLCD(msg_busy[i]); //scrie "Busy... ," pe linia 1, din coloana 8
 7c4:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
                  wait(50000);
 7c8:	60 e5       	ldi	r22, 0x50	; 80
 7ca:	73 ec       	ldi	r23, 0xC3	; 195
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 49 00 	call	0x92	; 0x92 <wait>
               buf_pit[2]=kbcode;
               buf_pit[3]='\0';
               gotoLC(1,3);
               putchLCD(kbcode); //scrie a treia cifra
               gotoLC(1,8);
               for(int i=0; msg_busy[i] != 0; i++){
 7d4:	f8 01       	movw	r30, r16
 7d6:	81 91       	ld	r24, Z+
 7d8:	8f 01       	movw	r16, r30
 7da:	88 23       	and	r24, r24
 7dc:	99 f7       	brne	.-26     	; 0x7c4 <main+0x104>
                  putchLCD(msg_busy[i]); //scrie "Busy... ," pe linia 1, din coloana 8
                  wait(50000);
               }
               c = atoi(buf_pit); //calculeaza c
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	0e 94 94 04 	call	0x928	; 0x928 <atoi>
 7e6:	3c 01       	movw	r6, r24
 7e8:	88 24       	eor	r8, r8
 7ea:	77 fc       	sbrc	r7, 7
 7ec:	80 94       	com	r8
 7ee:	98 2c       	mov	r9, r8

               for(a = 1; a <= c; a++){
                  for(b = 1; b <= c; b++){
                     if(a * a + b * b == c * c){ //verifica daca a^2 + b^2 = c^2
 7f0:	c4 01       	movw	r24, r8
 7f2:	b3 01       	movw	r22, r6
 7f4:	a4 01       	movw	r20, r8
 7f6:	93 01       	movw	r18, r6
 7f8:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsi3>
 7fc:	6e 87       	std	Y+14, r22	; 0x0e
 7fe:	7f 87       	std	Y+15, r23	; 0x0f
 800:	88 8b       	std	Y+16, r24	; 0x10
 802:	99 8b       	std	Y+17, r25	; 0x11
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	a9 2e       	mov	r10, r25
 808:	b1 2c       	mov	r11, r1
 80a:	c1 2c       	mov	r12, r1
 80c:	d1 2c       	mov	r13, r1
 80e:	22 c0       	rjmp	.+68     	; 0x854 <main+0x194>
 810:	c8 01       	movw	r24, r16
 812:	b7 01       	movw	r22, r14
 814:	a8 01       	movw	r20, r16
 816:	97 01       	movw	r18, r14
 818:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsi3>
 81c:	62 0d       	add	r22, r2
 81e:	73 1d       	adc	r23, r3
 820:	84 1d       	adc	r24, r4
 822:	95 1d       	adc	r25, r5
 824:	2e 85       	ldd	r18, Y+14	; 0x0e
 826:	3f 85       	ldd	r19, Y+15	; 0x0f
 828:	48 89       	ldd	r20, Y+16	; 0x10
 82a:	59 89       	ldd	r21, Y+17	; 0x11
 82c:	62 17       	cp	r22, r18
 82e:	73 07       	cpc	r23, r19
 830:	84 07       	cpc	r24, r20
 832:	95 07       	cpc	r25, r21
 834:	21 f1       	breq	.+72     	; 0x87e <main+0x1be>
                  wait(50000);
               }
               c = atoi(buf_pit); //calculeaza c

               for(a = 1; a <= c; a++){
                  for(b = 1; b <= c; b++){
 836:	08 94       	sec
 838:	e1 1c       	adc	r14, r1
 83a:	f1 1c       	adc	r15, r1
 83c:	01 1d       	adc	r16, r1
 83e:	11 1d       	adc	r17, r1
 840:	6e 14       	cp	r6, r14
 842:	7f 04       	cpc	r7, r15
 844:	80 06       	cpc	r8, r16
 846:	91 06       	cpc	r9, r17
 848:	18 f7       	brcc	.-58     	; 0x810 <main+0x150>
                  putchLCD(msg_busy[i]); //scrie "Busy... ," pe linia 1, din coloana 8
                  wait(50000);
               }
               c = atoi(buf_pit); //calculeaza c

               for(a = 1; a <= c; a++){
 84a:	08 94       	sec
 84c:	a1 1c       	adc	r10, r1
 84e:	b1 1c       	adc	r11, r1
 850:	c1 1c       	adc	r12, r1
 852:	d1 1c       	adc	r13, r1
 854:	6a 14       	cp	r6, r10
 856:	7b 04       	cpc	r7, r11
 858:	8c 04       	cpc	r8, r12
 85a:	9d 04       	cpc	r9, r13
 85c:	10 f4       	brcc	.+4      	; 0x862 <main+0x1a2>
 85e:	10 e0       	ldi	r17, 0x00	; 0
 860:	0f c0       	rjmp	.+30     	; 0x880 <main+0x1c0>
                  for(b = 1; b <= c; b++){
                     if(a * a + b * b == c * c){ //verifica daca a^2 + b^2 = c^2
 862:	c6 01       	movw	r24, r12
 864:	b5 01       	movw	r22, r10
 866:	a6 01       	movw	r20, r12
 868:	95 01       	movw	r18, r10
 86a:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsi3>
 86e:	1b 01       	movw	r2, r22
 870:	2c 01       	movw	r4, r24
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	e8 2e       	mov	r14, r24
 876:	f1 2c       	mov	r15, r1
 878:	01 2d       	mov	r16, r1
 87a:	11 2d       	mov	r17, r1
 87c:	e1 cf       	rjmp	.-62     	; 0x840 <main+0x180>
 87e:	11 e0       	ldi	r17, 0x01	; 1
                  }
               }

               show_result:
               
               gotoLC(1,8);
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	68 e0       	ldi	r22, 0x08	; 8
 884:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
      		   if(pitagoreic){
 888:	11 23       	and	r17, r17
 88a:	19 f0       	breq	.+6      	; 0x892 <main+0x1d2>
      		      putsLCD("PYTH    ");
 88c:	89 e8       	ldi	r24, 0x89	; 137
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <main+0x1d6>
      		   }
      		   else{
      		      putsLCD("nonPYTH ");
 892:	82 e9       	ldi	r24, 0x92	; 146
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
 89a:	49 cf       	rjmp	.-366    	; 0x72e <main+0x6e>

0000089c <__mulsi3>:
 89c:	62 9f       	mul	r22, r18
 89e:	d0 01       	movw	r26, r0
 8a0:	73 9f       	mul	r23, r19
 8a2:	f0 01       	movw	r30, r0
 8a4:	82 9f       	mul	r24, r18
 8a6:	e0 0d       	add	r30, r0
 8a8:	f1 1d       	adc	r31, r1
 8aa:	64 9f       	mul	r22, r20
 8ac:	e0 0d       	add	r30, r0
 8ae:	f1 1d       	adc	r31, r1
 8b0:	92 9f       	mul	r25, r18
 8b2:	f0 0d       	add	r31, r0
 8b4:	83 9f       	mul	r24, r19
 8b6:	f0 0d       	add	r31, r0
 8b8:	74 9f       	mul	r23, r20
 8ba:	f0 0d       	add	r31, r0
 8bc:	65 9f       	mul	r22, r21
 8be:	f0 0d       	add	r31, r0
 8c0:	99 27       	eor	r25, r25
 8c2:	72 9f       	mul	r23, r18
 8c4:	b0 0d       	add	r27, r0
 8c6:	e1 1d       	adc	r30, r1
 8c8:	f9 1f       	adc	r31, r25
 8ca:	63 9f       	mul	r22, r19
 8cc:	b0 0d       	add	r27, r0
 8ce:	e1 1d       	adc	r30, r1
 8d0:	f9 1f       	adc	r31, r25
 8d2:	bd 01       	movw	r22, r26
 8d4:	cf 01       	movw	r24, r30
 8d6:	11 24       	eor	r1, r1
 8d8:	08 95       	ret

000008da <__udivmodhi4>:
 8da:	aa 1b       	sub	r26, r26
 8dc:	bb 1b       	sub	r27, r27
 8de:	51 e1       	ldi	r21, 0x11	; 17
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__udivmodhi4_ep>

000008e2 <__udivmodhi4_loop>:
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	a6 17       	cp	r26, r22
 8e8:	b7 07       	cpc	r27, r23
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <__udivmodhi4_ep>
 8ec:	a6 1b       	sub	r26, r22
 8ee:	b7 0b       	sbc	r27, r23

000008f0 <__udivmodhi4_ep>:
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	5a 95       	dec	r21
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__udivmodhi4_loop>
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	bc 01       	movw	r22, r24
 8fe:	cd 01       	movw	r24, r26
 900:	08 95       	ret

00000902 <__divmodhi4>:
 902:	97 fb       	bst	r25, 7
 904:	09 2e       	mov	r0, r25
 906:	07 26       	eor	r0, r23
 908:	0a d0       	rcall	.+20     	; 0x91e <__divmodhi4_neg1>
 90a:	77 fd       	sbrc	r23, 7
 90c:	04 d0       	rcall	.+8      	; 0x916 <__divmodhi4_neg2>
 90e:	e5 df       	rcall	.-54     	; 0x8da <__udivmodhi4>
 910:	06 d0       	rcall	.+12     	; 0x91e <__divmodhi4_neg1>
 912:	00 20       	and	r0, r0
 914:	1a f4       	brpl	.+6      	; 0x91c <__divmodhi4_exit>

00000916 <__divmodhi4_neg2>:
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255

0000091c <__divmodhi4_exit>:
 91c:	08 95       	ret

0000091e <__divmodhi4_neg1>:
 91e:	f6 f7       	brtc	.-4      	; 0x91c <__divmodhi4_exit>
 920:	90 95       	com	r25
 922:	81 95       	neg	r24
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	08 95       	ret

00000928 <atoi>:
 928:	fc 01       	movw	r30, r24
 92a:	88 27       	eor	r24, r24
 92c:	99 27       	eor	r25, r25
 92e:	e8 94       	clt
 930:	21 91       	ld	r18, Z+
 932:	20 32       	cpi	r18, 0x20	; 32
 934:	e9 f3       	breq	.-6      	; 0x930 <atoi+0x8>
 936:	29 30       	cpi	r18, 0x09	; 9
 938:	10 f0       	brcs	.+4      	; 0x93e <atoi+0x16>
 93a:	2e 30       	cpi	r18, 0x0E	; 14
 93c:	c8 f3       	brcs	.-14     	; 0x930 <atoi+0x8>
 93e:	2b 32       	cpi	r18, 0x2B	; 43
 940:	41 f0       	breq	.+16     	; 0x952 <atoi+0x2a>
 942:	2d 32       	cpi	r18, 0x2D	; 45
 944:	39 f4       	brne	.+14     	; 0x954 <atoi+0x2c>
 946:	68 94       	set
 948:	04 c0       	rjmp	.+8      	; 0x952 <atoi+0x2a>
 94a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulhi_const_10>
 94e:	82 0f       	add	r24, r18
 950:	91 1d       	adc	r25, r1
 952:	21 91       	ld	r18, Z+
 954:	20 53       	subi	r18, 0x30	; 48
 956:	2a 30       	cpi	r18, 0x0A	; 10
 958:	c0 f3       	brcs	.-16     	; 0x94a <atoi+0x22>
 95a:	1e f4       	brtc	.+6      	; 0x962 <atoi+0x3a>
 95c:	90 95       	com	r25
 95e:	81 95       	neg	r24
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <itoa>:
 964:	fb 01       	movw	r30, r22
 966:	9f 01       	movw	r18, r30
 968:	e8 94       	clt
 96a:	42 30       	cpi	r20, 0x02	; 2
 96c:	c4 f0       	brlt	.+48     	; 0x99e <itoa+0x3a>
 96e:	45 32       	cpi	r20, 0x25	; 37
 970:	b4 f4       	brge	.+44     	; 0x99e <itoa+0x3a>
 972:	4a 30       	cpi	r20, 0x0A	; 10
 974:	29 f4       	brne	.+10     	; 0x980 <itoa+0x1c>
 976:	97 fb       	bst	r25, 7
 978:	1e f4       	brtc	.+6      	; 0x980 <itoa+0x1c>
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	64 2f       	mov	r22, r20
 982:	77 27       	eor	r23, r23
 984:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 988:	80 5d       	subi	r24, 0xD0	; 208
 98a:	8a 33       	cpi	r24, 0x3A	; 58
 98c:	0c f0       	brlt	.+2      	; 0x990 <itoa+0x2c>
 98e:	89 5d       	subi	r24, 0xD9	; 217
 990:	81 93       	st	Z+, r24
 992:	cb 01       	movw	r24, r22
 994:	00 97       	sbiw	r24, 0x00	; 0
 996:	a1 f7       	brne	.-24     	; 0x980 <itoa+0x1c>
 998:	16 f4       	brtc	.+4      	; 0x99e <itoa+0x3a>
 99a:	5d e2       	ldi	r21, 0x2D	; 45
 99c:	51 93       	st	Z+, r21
 99e:	10 82       	st	Z, r1
 9a0:	c9 01       	movw	r24, r18
 9a2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <strrev>

000009a6 <__mulhi_const_10>:
 9a6:	7a e0       	ldi	r23, 0x0A	; 10
 9a8:	97 9f       	mul	r25, r23
 9aa:	90 2d       	mov	r25, r0
 9ac:	87 9f       	mul	r24, r23
 9ae:	80 2d       	mov	r24, r0
 9b0:	91 0d       	add	r25, r1
 9b2:	11 24       	eor	r1, r1
 9b4:	08 95       	ret

000009b6 <strrev>:
 9b6:	dc 01       	movw	r26, r24
 9b8:	fc 01       	movw	r30, r24
 9ba:	67 2f       	mov	r22, r23
 9bc:	71 91       	ld	r23, Z+
 9be:	77 23       	and	r23, r23
 9c0:	e1 f7       	brne	.-8      	; 0x9ba <strrev+0x4>
 9c2:	32 97       	sbiw	r30, 0x02	; 2
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <strrev+0x18>
 9c6:	7c 91       	ld	r23, X
 9c8:	6d 93       	st	X+, r22
 9ca:	70 83       	st	Z, r23
 9cc:	62 91       	ld	r22, -Z
 9ce:	ae 17       	cp	r26, r30
 9d0:	bf 07       	cpc	r27, r31
 9d2:	c8 f3       	brcs	.-14     	; 0x9c6 <strrev+0x10>
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
