
pmw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a6  008000a6  00000850  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c2  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000553  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029c  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a6  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a5  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  8a:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait>:
#define SReg 0
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
  92:	9b 01       	movw	r18, r22
  94:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  96:	10 92 a6 00 	sts	0x00A6, r1
  9a:	10 92 a7 00 	sts	0x00A7, r1
  9e:	10 92 a8 00 	sts	0x00A8, r1
  a2:	10 92 a9 00 	sts	0x00A9, r1
  a6:	13 c0       	rjmp	.+38     	; 0xce <wait+0x3c>
  a8:	80 91 a6 00 	lds	r24, 0x00A6
  ac:	90 91 a7 00 	lds	r25, 0x00A7
  b0:	a0 91 a8 00 	lds	r26, 0x00A8
  b4:	b0 91 a9 00 	lds	r27, 0x00A9
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
  be:	80 93 a6 00 	sts	0x00A6, r24
  c2:	90 93 a7 00 	sts	0x00A7, r25
  c6:	a0 93 a8 00 	sts	0x00A8, r26
  ca:	b0 93 a9 00 	sts	0x00A9, r27
  ce:	80 91 a6 00 	lds	r24, 0x00A6
  d2:	90 91 a7 00 	lds	r25, 0x00A7
  d6:	a0 91 a8 00 	lds	r26, 0x00A8
  da:	b0 91 a9 00 	lds	r27, 0x00A9
  de:	82 17       	cp	r24, r18
  e0:	93 07       	cpc	r25, r19
  e2:	a4 07       	cpc	r26, r20
  e4:	b5 07       	cpc	r27, r21
  e6:	00 f3       	brcs	.-64     	; 0xa8 <wait+0x16>
}
  e8:	08 95       	ret

000000ea <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   
   DDRD = 0b00000000;
  ea:	11 ba       	out	0x11, r1	; 17

   if (vRS == 0)
  ec:	88 23       	and	r24, r24
  ee:	11 f4       	brne	.+4      	; 0xf4 <rd_LCDreg+0xa>
      clrbit(PORTB, RS); //RS = '0'
  f0:	c5 98       	cbi	0x18, 5	; 24
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <rd_LCDreg+0xc>
   else
      setbit(PORTB, RS); //RS = '1'
  f4:	c5 9a       	sbi	0x18, 5	; 24

   setbit(PORTB, RW); //RW = '1'
  f6:	c6 9a       	sbi	0x18, 6	; 24

   nop;
  f8:	00 00       	nop

   setbit(PORTB, E); //E = '1'
  fa:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 104:	00 00       	nop

   data = PIND;
 106:	80 b3       	in	r24, 0x10	; 16

   clrbit(PORTB, E); //E = '0'
 108:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 10a:	00 00       	nop

   DDRD = 0b11111111;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	91 bb       	out	0x11, r25	; 17

   return data;
}
 110:	08 95       	ret

00000112 <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if (vRS == 0)
 112:	88 23       	and	r24, r24
 114:	11 f4       	brne	.+4      	; 0x11a <wr_LCDreg+0x8>
      clrbit(PORTB, RS); //RS = '0'
 116:	c5 98       	cbi	0x18, 5	; 24
 118:	01 c0       	rjmp	.+2      	; 0x11c <wr_LCDreg+0xa>
   else
      setbit(PORTB, RS); //RS = '1'
 11a:	c5 9a       	sbi	0x18, 5	; 24

   clrbit(PORTB, RW); //RW = '0'
 11c:	c6 98       	cbi	0x18, 6	; 24

   PORTD = data;
 11e:	62 bb       	out	0x12, r22	; 18

   nop;
 120:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 122:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 12c:	00 00       	nop

   clrbit(PORTB, E); //E = '0'
 12e:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 130:	00 00       	nop
}
 132:	08 95       	ret

00000134 <ckbf>:


void ckbf(){
   
   while(rd_LCDreg(SReg) & 1<<7){}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 13a:	87 fd       	sbrc	r24, 7
 13c:	fb cf       	rjmp	.-10     	; 0x134 <ckbf>
}
 13e:	08 95       	ret

00000140 <initLCD>:

void initLCD(){
   ckbf();
 140:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 - - -
   wr_LCDreg(IReg, 0b00111000);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	68 e3       	ldi	r22, 0x38	; 56
 148:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Entry mode set
   //bit 7 6 5 4   3 2   1 0
   //    0 0 0 0   0 1 I/D S
   //    0 0 0 0   0 1   1 0
   wr_LCDreg(IReg, 0b00000110);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	66 e0       	ldi	r22, 0x06	; 6
 154:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 158:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	6f e0       	ldi	r22, 0x0F	; 15
 160:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 164:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 170:	08 95       	ret

00000172 <sysinit>:

void sysinit(){
   PORTB = 0b00000000;
 172:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100010;
 174:	82 ee       	ldi	r24, 0xE2	; 226
 176:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0b11111111;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 bb       	out	0x11, r24	; 17
   PORTA = 0;
 17c:	1b ba       	out	0x1b, r1	; 27
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 17e:	10 92 a6 00 	sts	0x00A6, r1
 182:	10 92 a7 00 	sts	0x00A7, r1
 186:	10 92 a8 00 	sts	0x00A8, r1
 18a:	10 92 a9 00 	sts	0x00A9, r1
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <sysinit+0x44>
 190:	80 91 a6 00 	lds	r24, 0x00A6
 194:	90 91 a7 00 	lds	r25, 0x00A7
 198:	a0 91 a8 00 	lds	r26, 0x00A8
 19c:	b0 91 a9 00 	lds	r27, 0x00A9
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	a1 1d       	adc	r26, r1
 1a4:	b1 1d       	adc	r27, r1
 1a6:	80 93 a6 00 	sts	0x00A6, r24
 1aa:	90 93 a7 00 	sts	0x00A7, r25
 1ae:	a0 93 a8 00 	sts	0x00A8, r26
 1b2:	b0 93 a9 00 	sts	0x00A9, r27
 1b6:	80 91 a6 00 	lds	r24, 0x00A6
 1ba:	90 91 a7 00 	lds	r25, 0x00A7
 1be:	a0 91 a8 00 	lds	r26, 0x00A8
 1c2:	b0 91 a9 00 	lds	r27, 0x00A9
 1c6:	80 5c       	subi	r24, 0xC0	; 192
 1c8:	94 4d       	sbci	r25, 0xD4	; 212
 1ca:	a1 40       	sbci	r26, 0x01	; 1
 1cc:	b0 40       	sbci	r27, 0x00	; 0
 1ce:	00 f3       	brcs	.-64     	; 0x190 <sysinit+0x1e>
   PORTB = 0b00000000;
   DDRB  = 0b11100010;
   DDRD  = 0b11111111;
   PORTA = 0;
   wait(120000UL);
   initLCD();
 1d0:	0e 94 a0 00 	call	0x140	; 0x140 <initLCD>
}
 1d4:	08 95       	ret

000001d6 <clrLCD>:
}
*/

//Pasul 3
void clrLCD(){
   ckbf();
 1d6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 1e2:	08 95       	ret

000001e4 <gotoLC>:

//Pasul 4
void gotoLC(unsigned char line, unsigned char col){
 1e4:	1f 93       	push	r17
 1e6:	16 2f       	mov	r17, r22
   unsigned char position = 0;

   if(line == 1 && col < 17){
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <gotoLC+0x16>
 1ec:	61 31       	cpi	r22, 0x11	; 17
 1ee:	88 f4       	brcc	.+34     	; 0x212 <gotoLC+0x2e>
      position |= 1<<7;
      position |= col - 1;

      ckbf();
 1f0:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   0   0   0   col col col col
      wr_LCDreg(IReg, position);
 1f4:	11 50       	subi	r17, 0x01	; 1
 1f6:	10 68       	ori	r17, 0x80	; 128
 1f8:	08 c0       	rjmp	.+16     	; 0x20a <gotoLC+0x26>
   }
   else if(line == 2 && col < 17){
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	51 f4       	brne	.+20     	; 0x212 <gotoLC+0x2e>
 1fe:	61 31       	cpi	r22, 0x11	; 17
 200:	40 f4       	brcc	.+16     	; 0x212 <gotoLC+0x2e>
      position |= 1<<6 | 1<<7;
      position |= col - 1;

      ckbf();
 202:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   1   0   0   col col col col
      wr_LCDreg(IReg, position);
 206:	11 50       	subi	r17, 0x01	; 1
 208:	10 6c       	ori	r17, 0xC0	; 192
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	61 2f       	mov	r22, r17
 20e:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
   }
}
 212:	1f 91       	pop	r17
 214:	08 95       	ret

00000216 <putchLCD>:
   wait(120000UL);
   initLCD();
}

//Pasul 1
void putchLCD( char ch){
 216:	1f 93       	push	r17
 218:	18 2f       	mov	r17, r24
   ckbf();
 21a:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, ch);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	61 2f       	mov	r22, r17
 222:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 226:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 22a:	85 e1       	ldi	r24, 0x15	; 21
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <putchLCD+0x16>
   _delay_us(8);

   //0x10 == 16
   if(rd_LCDreg(SReg) == 0x10)
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 236:	80 31       	cpi	r24, 0x10	; 16
 238:	21 f4       	brne	.+8      	; 0x242 <putchLCD+0x2c>
      gotoLC(2,1);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

   //0x50 == 80
   if(rd_LCDreg(SReg) == 0x50)
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 248:	80 35       	cpi	r24, 0x50	; 80
 24a:	21 f4       	brne	.+8      	; 0x254 <putchLCD+0x3e>
      gotoLC(1,1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
}
 254:	1f 91       	pop	r17
 256:	08 95       	ret

00000258 <putsLCD>:
      wr_LCDreg(IReg, position);
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	15 e1       	ldi	r17, 0x15	; 21
 262:	1e c0       	rjmp	.+60     	; 0x2a0 <putsLCD+0x48>
   while(*ch){
      ckbf();
 264:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
      wr_LCDreg(DReg, *ch++);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	68 81       	ld	r22, Y
 26c:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
      
      ckbf();
 270:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
 274:	81 2f       	mov	r24, r17
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <putsLCD+0x1e>
      _delay_us(8);

      //0x10 == 16
      if(rd_LCDreg(SReg) == 0x10)
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 280:	80 31       	cpi	r24, 0x10	; 16
 282:	21 f4       	brne	.+8      	; 0x28c <putsLCD+0x34>
         gotoLC(2,1);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 75 00 	call	0xea	; 0xea <rd_LCDreg>
 292:	80 35       	cpi	r24, 0x50	; 80
 294:	21 f4       	brne	.+8      	; 0x29e <putsLCD+0x46>
         gotoLC(1,1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
      ckbf();
      wr_LCDreg(DReg, *ch++);
 29e:	21 96       	adiw	r28, 0x01	; 1
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	f9 f6       	brne	.-66     	; 0x264 <putsLCD+0xc>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
         gotoLC(1,1);
   }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <smiley>:

//Pasul 6: Smiley
void smiley(){
   ckbf();
 2ae:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   // Set CGRAM address
   //bit 7 6   5   4     3   2   1   0
   //    0 1 ACG ACG   ACG ACG ACG ACG
   //    0 1   0   1     0   0   0   0
   wr_LCDreg(IReg, 0b01010000);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	60 e5       	ldi	r22, 0x50	; 80
 2b6:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2ba:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	60 e4       	ldi	r22, 0x40	; 64
 2c2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2c6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001010); //line 2
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	6a e4       	ldi	r22, 0x4A	; 74
 2ce:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2d2:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 3
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	60 e4       	ldi	r22, 0x40	; 64
 2da:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2de:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000100); //line 4
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	64 e4       	ldi	r22, 0x44	; 68
 2e6:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2ea:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01010001); //line 5
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	61 e5       	ldi	r22, 0x51	; 81
 2f2:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 2f6:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01001110); //line 6
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	6e e4       	ldi	r22, 0x4E	; 78
 2fe:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 302:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 7
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	60 e4       	ldi	r22, 0x40	; 64
 30a:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>

   ckbf();
 30e:	0e 94 9a 00 	call	0x134	; 0x134 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 8
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	60 e4       	ldi	r22, 0x40	; 64
 316:	0e 94 89 00 	call	0x112	; 0x112 <wr_LCDreg>
}
 31a:	08 95       	ret

0000031c <kbscan>:

char kbscan(){
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	61 97       	sbiw	r28, 0x11	; 17
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	0c c0       	rjmp	.+24     	; 0x34c <kbscan+0x30>
	...
      nop; nop; nop; nop; nop; nop;

      cols = ~PINA;
 340:	29 b3       	in	r18, 0x19	; 25
 342:	20 95       	com	r18

      cols &= 0x0f;
 344:	2f 70       	andi	r18, 0x0F	; 15

      if (cols != 0)
 346:	51 f4       	brne	.+20     	; 0x35c <kbscan+0x40>
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 348:	8a b3       	in	r24, 0x1a	; 26
 34a:	88 0f       	add	r24, r24
 34c:	8a bb       	out	0x1a, r24	; 26
 34e:	8a b3       	in	r24, 0x1a	; 26
 350:	88 23       	and	r24, r24
 352:	81 f7       	brne	.-32     	; 0x334 <kbscan+0x18>
      if (cols != 0)
         break;
   }//end for

   if (cols == 0){
      PORTB &= 0<<1;
 354:	88 b3       	in	r24, 0x18	; 24
 356:	18 ba       	out	0x18, r1	; 24
 358:	8f e7       	ldi	r24, 0x7F	; 127
 35a:	35 c0       	rjmp	.+106    	; 0x3c6 <kbscan+0xaa>
      return NOKEY;
   }

   temp = DDRA;
 35c:	3a b3       	in	r19, 0x1a	; 26

   if (temp & 1<<4)
 35e:	83 2f       	mov	r24, r19
 360:	90 e0       	ldi	r25, 0x00	; 0
      lia = 0;

   if (temp & 1<<5)
      lia = 1;

   if (temp & 1<<6)
 362:	36 ff       	sbrs	r19, 6
 364:	02 c0       	rjmp	.+4      	; 0x36a <kbscan+0x4e>
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	07 c0       	rjmp	.+14     	; 0x378 <kbscan+0x5c>
 36a:	45 e0       	ldi	r20, 0x05	; 5
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	4a 95       	dec	r20
 372:	e1 f7       	brne	.-8      	; 0x36c <kbscan+0x50>
 374:	98 2f       	mov	r25, r24
 376:	91 70       	andi	r25, 0x01	; 1
      lia = 2;

   if (temp & 1<<7)
 378:	37 fd       	sbrc	r19, 7
 37a:	93 e0       	ldi	r25, 0x03	; 3
      lia = 3;

   if (cols & 1<<0){
 37c:	20 fd       	sbrc	r18, 0
 37e:	0c c0       	rjmp	.+24     	; 0x398 <kbscan+0x7c>
      cola = 0;
   }
   else if (cols & 1<<1){
 380:	21 ff       	sbrs	r18, 1
 382:	02 c0       	rjmp	.+4      	; 0x388 <kbscan+0x6c>
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	09 c0       	rjmp	.+18     	; 0x39a <kbscan+0x7e>
      cola = 1;
   }
   else if (cols & 1<<2){
 388:	22 ff       	sbrs	r18, 2
 38a:	02 c0       	rjmp	.+4      	; 0x390 <kbscan+0x74>
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	05 c0       	rjmp	.+10     	; 0x39a <kbscan+0x7e>
      cola = 2;
   }
   else if (cols & 1<<3){
 390:	23 ff       	sbrs	r18, 3
 392:	02 c0       	rjmp	.+4      	; 0x398 <kbscan+0x7c>
 394:	23 e0       	ldi	r18, 0x03	; 3
 396:	01 c0       	rjmp	.+2      	; 0x39a <kbscan+0x7e>
 398:	20 e0       	ldi	r18, 0x00	; 0
   unsigned char lia=0;  //linia activa
   unsigned char cola=0; //coloana activa 
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 39a:	de 01       	movw	r26, r28
 39c:	11 96       	adiw	r26, 0x01	; 1
 39e:	e0 e6       	ldi	r30, 0x60	; 96
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	81 e1       	ldi	r24, 0x11	; 17
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <kbscan+0x88>
      cola = 3;
   }

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];
 3ac:	99 0f       	add	r25, r25
 3ae:	99 0f       	add	r25, r25
 3b0:	92 0f       	add	r25, r18
 3b2:	fe 01       	movw	r30, r28
 3b4:	e9 0f       	add	r30, r25
 3b6:	f1 1d       	adc	r31, r1
 3b8:	81 81       	ldd	r24, Z+1	; 0x01

   while(cod_extern == '*' || cod_extern == '#'){
 3ba:	8a 32       	cpi	r24, 0x2A	; 42
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <kbscan+0xa6>
      PORTB |= 0x02;
 3be:	c1 9a       	sbi	0x18, 1	; 24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <kbscan+0xaa>

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];

   while(cod_extern == '*' || cod_extern == '#'){
 3c2:	83 32       	cpi	r24, 0x23	; 35
 3c4:	e1 f3       	breq	.-8      	; 0x3be <kbscan+0xa2>
      PORTB |= 0x02;
      return cod_extern;
   }

   return cod_extern;
}//end kbscan
 3c6:	61 96       	adiw	r28, 0x11	; 17
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	cf 91       	pop	r28
 3d4:	df 91       	pop	r29
 3d6:	08 95       	ret

000003d8 <main>:

#define C1 1
#define C2 2
#define C3 3

int main(){
 3d8:	2f 92       	push	r2
 3da:	3f 92       	push	r3
 3dc:	4f 92       	push	r4
 3de:	5f 92       	push	r5
 3e0:	6f 92       	push	r6
 3e2:	7f 92       	push	r7
 3e4:	8f 92       	push	r8
 3e6:	9f 92       	push	r9
 3e8:	af 92       	push	r10
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	61 97       	sbiw	r28, 0x11	; 17
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
   unsigned char stare = C1;
   char buf_pit[4];
   unsigned long int a,b,c;
   unsigned char pitagoreic = 0;

   sysinit();
 40c:	0e 94 b9 00 	call	0x172	; 0x172 <sysinit>

   //bit 7 - FOC0 nu se programeaza, ramne 0
   //bits 3,6 - WGM01 si WGM00 = 11, adica mod CTC
   //bits 5:4 - COM01 si COM00 = 10
   //bits 2:0 - CS02, CS01 si CS00 = 100, adica clk/256 (de la prescaler)
   TCCR0 = 0b01101100;
 410:	8c e6       	ldi	r24, 0x6C	; 108
 412:	83 bf       	out	0x33, r24	; 51

   OCR0 = 128;
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	8c bf       	out	0x3c, r24	; 60

   setbit(DDRB, 3);
 418:	bb 9a       	sbi	0x17, 3	; 23
 41a:	1d 86       	std	Y+13, r1	; 0x0d
 41c:	1c 86       	std	Y+12, r1	; 0x0c
 41e:	22 e3       	ldi	r18, 0x32	; 50
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	3b 87       	std	Y+11, r19	; 0x0b
 424:	2a 87       	std	Y+10, r18	; 0x0a
 426:	01 e0       	ldi	r16, 0x01	; 1
 428:	1f e7       	ldi	r17, 0x7F	; 127
   
   while(1){
      if(loop_cnt==200){
 42a:	3c 85       	ldd	r19, Y+12	; 0x0c
 42c:	38 3c       	cpi	r19, 0xC8	; 200
 42e:	51 f4       	brne	.+20     	; 0x444 <main+0x6c>
         code_ante=code_now;
         code_now = kbscan();
 430:	0e 94 8e 01 	call	0x31c	; 0x31c <kbscan>
 434:	89 87       	std	Y+9, r24	; 0x09
         if(code_now != NOKEY && code_ante== NOKEY ){
 436:	8f 37       	cpi	r24, 0x7F	; 127
 438:	19 f0       	breq	.+6      	; 0x440 <main+0x68>
 43a:	1f 37       	cpi	r17, 0x7F	; 127
 43c:	09 f4       	brne	.+2      	; 0x440 <main+0x68>
 43e:	f4 c0       	rjmp	.+488    	; 0x628 <__stack+0x1c9>
 440:	19 85       	ldd	r17, Y+9	; 0x09
 442:	1c 86       	std	Y+12, r1	; 0x0c
 444:	19 87       	std	Y+9, r17	; 0x09
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	3b c0       	rjmp	.+118    	; 0x4c0 <__stack+0x61>
         loop_cnt=0;
      }

      //PWM start
      if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
         if(kbcode == 'C'){
 44a:	49 85       	ldd	r20, Y+9	; 0x09
 44c:	43 34       	cpi	r20, 0x43	; 67
 44e:	71 f4       	brne	.+28     	; 0x46c <__stack+0xd>
         //lumi=//...creste luminozitatea
         lumi += 5;
 450:	6a 85       	ldd	r22, Y+10	; 0x0a
 452:	7b 85       	ldd	r23, Y+11	; 0x0b
 454:	6b 5f       	subi	r22, 0xFB	; 251
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	7b 87       	std	Y+11, r23	; 0x0b
 45a:	6a 87       	std	Y+10, r22	; 0x0a
 45c:	65 36       	cpi	r22, 0x65	; 101
 45e:	71 05       	cpc	r23, r1
 460:	94 f0       	brlt	.+36     	; 0x486 <__stack+0x27>
 462:	84 e6       	ldi	r24, 0x64	; 100
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	9b 87       	std	Y+11, r25	; 0x0b
 468:	8a 87       	std	Y+10, r24	; 0x0a
 46a:	0d c0       	rjmp	.+26     	; 0x486 <__stack+0x27>
         if(lumi > 100){
            lumi = 100;
         }
      }

      if(kbcode == 'D'){
 46c:	99 85       	ldd	r25, Y+9	; 0x09
 46e:	94 34       	cpi	r25, 0x44	; 68
 470:	51 f4       	brne	.+20     	; 0x486 <__stack+0x27>
         //lumi=//...scade luminozitatea
         lumi -= 5;
 472:	2a 85       	ldd	r18, Y+10	; 0x0a
 474:	3b 85       	ldd	r19, Y+11	; 0x0b
 476:	25 50       	subi	r18, 0x05	; 5
 478:	30 40       	sbci	r19, 0x00	; 0
 47a:	3b 87       	std	Y+11, r19	; 0x0b
 47c:	2a 87       	std	Y+10, r18	; 0x0a
 47e:	37 ff       	sbrs	r19, 7
 480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
 482:	1b 86       	std	Y+11, r1	; 0x0b
 484:	1a 86       	std	Y+10, r1	; 0x0a
            lumi = 0;
     
         }
      }
         
         gotoLC(2,1);
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
         putsLCD("L=");
 48e:	81 e7       	ldi	r24, 0x71	; 113
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
         itoa(lumi, buf_lumi, 10);
 496:	8a 85       	ldd	r24, Y+10	; 0x0a
 498:	9b 85       	ldd	r25, Y+11	; 0x0b
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	4a e0       	ldi	r20, 0x0A	; 10
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	0e 94 80 03 	call	0x700	; 0x700 <itoa>
         putsLCD(buf_lumi);
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
         putsLCD("%  " );
 4b0:	84 e7       	ldi	r24, 0x74	; 116
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
 4b8:	39 85       	ldd	r19, Y+9	; 0x09
 4ba:	3d 87       	std	Y+13, r19	; 0x0d
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	1c 86       	std	Y+12, r1	; 0x0c

      //lumi% duty cycle. Se aplica regula de 3 simpla
      //100.......255
      //lumi......x
      //x = 255 * lumi / 100
      OCR0 = (255 * lumi) / 100;
 4c0:	4a 85       	ldd	r20, Y+10	; 0x0a
 4c2:	5b 85       	ldd	r21, Y+11	; 0x0b
 4c4:	6f ef       	ldi	r22, 0xFF	; 255
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	46 9f       	mul	r20, r22
 4ca:	c0 01       	movw	r24, r0
 4cc:	47 9f       	mul	r20, r23
 4ce:	90 0d       	add	r25, r0
 4d0:	56 9f       	mul	r21, r22
 4d2:	90 0d       	add	r25, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	64 e6       	ldi	r22, 0x64	; 100
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	0e 94 3b 03 	call	0x676	; 0x676 <__divmodhi4>
 4de:	6c bf       	out	0x3c, r22	; 60
      

	  //c pitagoreic start
      if( kbhit && kbcode>='0' && kbcode<='9'){
 4e0:	22 23       	and	r18, r18
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__stack+0x87>
 4e4:	9c c0       	rjmp	.+312    	; 0x61e <__stack+0x1bf>
 4e6:	7d 85       	ldd	r23, Y+13	; 0x0d
 4e8:	70 33       	cpi	r23, 0x30	; 48
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <__stack+0x8f>
 4ec:	98 c0       	rjmp	.+304    	; 0x61e <__stack+0x1bf>
 4ee:	7a 33       	cpi	r23, 0x3A	; 58
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <__stack+0x95>
 4f2:	95 c0       	rjmp	.+298    	; 0x61e <__stack+0x1bf>
         kbhit=0;

         switch(stare){
 4f4:	02 30       	cpi	r16, 0x02	; 2
 4f6:	b9 f0       	breq	.+46     	; 0x526 <__stack+0xc7>
 4f8:	03 30       	cpi	r16, 0x03	; 3
 4fa:	01 f1       	breq	.+64     	; 0x53c <__stack+0xdd>
 4fc:	01 30       	cpi	r16, 0x01	; 1
 4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0xa3>
 500:	8e c0       	rjmp	.+284    	; 0x61e <__stack+0x1bf>
         	case C1:   //cifra 0
               gotoLC(1, 1);
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putsLCD("                ");
 50a:	88 e7       	ldi	r24, 0x78	; 120
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
               gotoLC(1, 1);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               buf_pit[0]=kbcode;
 51a:	8d 85       	ldd	r24, Y+13	; 0x0d
 51c:	8d 83       	std	Y+5, r24	; 0x05
               putchLCD(kbcode); //scrie prima cifra
 51e:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
 522:	02 e0       	ldi	r16, 0x02	; 2
 524:	7c c0       	rjmp	.+248    	; 0x61e <__stack+0x1bf>
               stare=C2;
               break;

            case C2:
               buf_pit[1]=kbcode;
 526:	9d 85       	ldd	r25, Y+13	; 0x0d
 528:	9e 83       	std	Y+6, r25	; 0x06
               gotoLC(1,2);
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	62 e0       	ldi	r22, 0x02	; 2
 52e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putchLCD(kbcode); //scrie a doua cifra
 532:	8d 85       	ldd	r24, Y+13	; 0x0d
 534:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
 538:	03 e0       	ldi	r16, 0x03	; 3
 53a:	71 c0       	rjmp	.+226    	; 0x61e <__stack+0x1bf>
               stare=C3;
               break;
         
            case C3:
               buf_pit[2]=kbcode;
 53c:	2d 85       	ldd	r18, Y+13	; 0x0d
 53e:	2f 83       	std	Y+7, r18	; 0x07
               buf_pit[3]='\0';
 540:	18 86       	std	Y+8, r1	; 0x08
               gotoLC(1,3);
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	63 e0       	ldi	r22, 0x03	; 3
 546:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putchLCD(kbcode); //scrie a treia cifra
 54a:	8d 85       	ldd	r24, Y+13	; 0x0d
 54c:	0e 94 0b 01 	call	0x216	; 0x216 <putchLCD>
               gotoLC(1,8);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	68 e0       	ldi	r22, 0x08	; 8
 554:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
               putsLCD("Busy... ,"); //scrie "Busy... ," pe linia 1, din coloana 8
 558:	89 e8       	ldi	r24, 0x89	; 137
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
               c = atoi(buf_pit); //calculeaza c
 560:	ce 01       	movw	r24, r28
 562:	05 96       	adiw	r24, 0x05	; 5
 564:	0e 94 62 03 	call	0x6c4	; 0x6c4 <atoi>
 568:	3c 01       	movw	r6, r24
 56a:	88 24       	eor	r8, r8
 56c:	77 fc       	sbrc	r7, 7
 56e:	80 94       	com	r8
 570:	98 2c       	mov	r9, r8

               for(a = 1; a <= c; a++){
                  for(b = 1; b <= c; b++){
                     if(a * a + b * b == c * c){ //verifica daca a^2 + b^2 = c^2
 572:	c4 01       	movw	r24, r8
 574:	b3 01       	movw	r22, r6
 576:	a4 01       	movw	r20, r8
 578:	93 01       	movw	r18, r6
 57a:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsi3>
 57e:	6e 87       	std	Y+14, r22	; 0x0e
 580:	7f 87       	std	Y+15, r23	; 0x0f
 582:	88 8b       	std	Y+16, r24	; 0x10
 584:	99 8b       	std	Y+17, r25	; 0x11
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	a9 2e       	mov	r10, r25
 58a:	b1 2c       	mov	r11, r1
 58c:	c1 2c       	mov	r12, r1
 58e:	d1 2c       	mov	r13, r1
 590:	22 c0       	rjmp	.+68     	; 0x5d6 <__stack+0x177>
 592:	c8 01       	movw	r24, r16
 594:	b7 01       	movw	r22, r14
 596:	a8 01       	movw	r20, r16
 598:	97 01       	movw	r18, r14
 59a:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsi3>
 59e:	62 0d       	add	r22, r2
 5a0:	73 1d       	adc	r23, r3
 5a2:	84 1d       	adc	r24, r4
 5a4:	95 1d       	adc	r25, r5
 5a6:	2e 85       	ldd	r18, Y+14	; 0x0e
 5a8:	3f 85       	ldd	r19, Y+15	; 0x0f
 5aa:	48 89       	ldd	r20, Y+16	; 0x10
 5ac:	59 89       	ldd	r21, Y+17	; 0x11
 5ae:	62 17       	cp	r22, r18
 5b0:	73 07       	cpc	r23, r19
 5b2:	84 07       	cpc	r24, r20
 5b4:	95 07       	cpc	r25, r21
 5b6:	21 f1       	breq	.+72     	; 0x600 <__stack+0x1a1>
               gotoLC(1,8);
               putsLCD("Busy... ,"); //scrie "Busy... ," pe linia 1, din coloana 8
               c = atoi(buf_pit); //calculeaza c

               for(a = 1; a <= c; a++){
                  for(b = 1; b <= c; b++){
 5b8:	08 94       	sec
 5ba:	e1 1c       	adc	r14, r1
 5bc:	f1 1c       	adc	r15, r1
 5be:	01 1d       	adc	r16, r1
 5c0:	11 1d       	adc	r17, r1
 5c2:	6e 14       	cp	r6, r14
 5c4:	7f 04       	cpc	r7, r15
 5c6:	80 06       	cpc	r8, r16
 5c8:	91 06       	cpc	r9, r17
 5ca:	18 f7       	brcc	.-58     	; 0x592 <__stack+0x133>
               putchLCD(kbcode); //scrie a treia cifra
               gotoLC(1,8);
               putsLCD("Busy... ,"); //scrie "Busy... ," pe linia 1, din coloana 8
               c = atoi(buf_pit); //calculeaza c

               for(a = 1; a <= c; a++){
 5cc:	08 94       	sec
 5ce:	a1 1c       	adc	r10, r1
 5d0:	b1 1c       	adc	r11, r1
 5d2:	c1 1c       	adc	r12, r1
 5d4:	d1 1c       	adc	r13, r1
 5d6:	6a 14       	cp	r6, r10
 5d8:	7b 04       	cpc	r7, r11
 5da:	8c 04       	cpc	r8, r12
 5dc:	9d 04       	cpc	r9, r13
 5de:	10 f4       	brcc	.+4      	; 0x5e4 <__stack+0x185>
 5e0:	10 e0       	ldi	r17, 0x00	; 0
 5e2:	0f c0       	rjmp	.+30     	; 0x602 <__stack+0x1a3>
                  for(b = 1; b <= c; b++){
                     if(a * a + b * b == c * c){ //verifica daca a^2 + b^2 = c^2
 5e4:	c6 01       	movw	r24, r12
 5e6:	b5 01       	movw	r22, r10
 5e8:	a6 01       	movw	r20, r12
 5ea:	95 01       	movw	r18, r10
 5ec:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsi3>
 5f0:	1b 01       	movw	r2, r22
 5f2:	2c 01       	movw	r4, r24
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	e8 2e       	mov	r14, r24
 5f8:	f1 2c       	mov	r15, r1
 5fa:	01 2d       	mov	r16, r1
 5fc:	11 2d       	mov	r17, r1
 5fe:	e1 cf       	rjmp	.-62     	; 0x5c2 <__stack+0x163>
 600:	11 e0       	ldi	r17, 0x01	; 1
                  }
               }

               show_result:
               
               gotoLC(1,8);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	68 e0       	ldi	r22, 0x08	; 8
 606:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <gotoLC>
      		   if(pitagoreic){
 60a:	11 23       	and	r17, r17
 60c:	19 f0       	breq	.+6      	; 0x614 <__stack+0x1b5>
      		      putsLCD("PYTH    ");
 60e:	83 e9       	ldi	r24, 0x93	; 147
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <__stack+0x1b9>
      		   }
      		   else{
      		      putsLCD("nonPYTH ");
 614:	8c e9       	ldi	r24, 0x9C	; 156
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 2c 01 	call	0x258	; 0x258 <putsLCD>
 61c:	01 e0       	ldi	r16, 0x01	; 1
         }//end switch     
      }
     // end c pitagoreic      

      kbhit=0;
      loop_cnt++;
 61e:	3c 85       	ldd	r19, Y+12	; 0x0c
 620:	3f 5f       	subi	r19, 0xFF	; 255
 622:	3c 87       	std	Y+12, r19	; 0x0c
 624:	19 85       	ldd	r17, Y+9	; 0x09
 626:	01 cf       	rjmp	.-510    	; 0x42a <main+0x52>
         }
         loop_cnt=0;
      }

      //PWM start
      if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
 628:	89 85       	ldd	r24, Y+9	; 0x09
 62a:	83 54       	subi	r24, 0x43	; 67
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	08 f4       	brcc	.+2      	; 0x632 <__stack+0x1d3>
 630:	0c cf       	rjmp	.-488    	; 0x44a <main+0x72>
 632:	49 85       	ldd	r20, Y+9	; 0x09
 634:	4d 87       	std	Y+13, r20	; 0x0d
 636:	42 cf       	rjmp	.-380    	; 0x4bc <__stack+0x5d>

00000638 <__mulsi3>:
 638:	62 9f       	mul	r22, r18
 63a:	d0 01       	movw	r26, r0
 63c:	73 9f       	mul	r23, r19
 63e:	f0 01       	movw	r30, r0
 640:	82 9f       	mul	r24, r18
 642:	e0 0d       	add	r30, r0
 644:	f1 1d       	adc	r31, r1
 646:	64 9f       	mul	r22, r20
 648:	e0 0d       	add	r30, r0
 64a:	f1 1d       	adc	r31, r1
 64c:	92 9f       	mul	r25, r18
 64e:	f0 0d       	add	r31, r0
 650:	83 9f       	mul	r24, r19
 652:	f0 0d       	add	r31, r0
 654:	74 9f       	mul	r23, r20
 656:	f0 0d       	add	r31, r0
 658:	65 9f       	mul	r22, r21
 65a:	f0 0d       	add	r31, r0
 65c:	99 27       	eor	r25, r25
 65e:	72 9f       	mul	r23, r18
 660:	b0 0d       	add	r27, r0
 662:	e1 1d       	adc	r30, r1
 664:	f9 1f       	adc	r31, r25
 666:	63 9f       	mul	r22, r19
 668:	b0 0d       	add	r27, r0
 66a:	e1 1d       	adc	r30, r1
 66c:	f9 1f       	adc	r31, r25
 66e:	bd 01       	movw	r22, r26
 670:	cf 01       	movw	r24, r30
 672:	11 24       	eor	r1, r1
 674:	08 95       	ret

00000676 <__divmodhi4>:
 676:	97 fb       	bst	r25, 7
 678:	09 2e       	mov	r0, r25
 67a:	07 26       	eor	r0, r23
 67c:	0a d0       	rcall	.+20     	; 0x692 <__divmodhi4_neg1>
 67e:	77 fd       	sbrc	r23, 7
 680:	04 d0       	rcall	.+8      	; 0x68a <__divmodhi4_neg2>
 682:	0c d0       	rcall	.+24     	; 0x69c <__udivmodhi4>
 684:	06 d0       	rcall	.+12     	; 0x692 <__divmodhi4_neg1>
 686:	00 20       	and	r0, r0
 688:	1a f4       	brpl	.+6      	; 0x690 <__divmodhi4_exit>

0000068a <__divmodhi4_neg2>:
 68a:	70 95       	com	r23
 68c:	61 95       	neg	r22
 68e:	7f 4f       	sbci	r23, 0xFF	; 255

00000690 <__divmodhi4_exit>:
 690:	08 95       	ret

00000692 <__divmodhi4_neg1>:
 692:	f6 f7       	brtc	.-4      	; 0x690 <__divmodhi4_exit>
 694:	90 95       	com	r25
 696:	81 95       	neg	r24
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__udivmodhi4>:
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	51 e1       	ldi	r21, 0x11	; 17
 6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <__udivmodhi4_ep>

000006a4 <__udivmodhi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	a6 17       	cp	r26, r22
 6aa:	b7 07       	cpc	r27, r23
 6ac:	10 f0       	brcs	.+4      	; 0x6b2 <__udivmodhi4_ep>
 6ae:	a6 1b       	sub	r26, r22
 6b0:	b7 0b       	sbc	r27, r23

000006b2 <__udivmodhi4_ep>:
 6b2:	88 1f       	adc	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	5a 95       	dec	r21
 6b8:	a9 f7       	brne	.-22     	; 0x6a4 <__udivmodhi4_loop>
 6ba:	80 95       	com	r24
 6bc:	90 95       	com	r25
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	08 95       	ret

000006c4 <atoi>:
 6c4:	fc 01       	movw	r30, r24
 6c6:	88 27       	eor	r24, r24
 6c8:	99 27       	eor	r25, r25
 6ca:	e8 94       	clt
 6cc:	21 91       	ld	r18, Z+
 6ce:	20 32       	cpi	r18, 0x20	; 32
 6d0:	e9 f3       	breq	.-6      	; 0x6cc <atoi+0x8>
 6d2:	29 30       	cpi	r18, 0x09	; 9
 6d4:	10 f0       	brcs	.+4      	; 0x6da <atoi+0x16>
 6d6:	2e 30       	cpi	r18, 0x0E	; 14
 6d8:	c8 f3       	brcs	.-14     	; 0x6cc <atoi+0x8>
 6da:	2b 32       	cpi	r18, 0x2B	; 43
 6dc:	41 f0       	breq	.+16     	; 0x6ee <atoi+0x2a>
 6de:	2d 32       	cpi	r18, 0x2D	; 45
 6e0:	39 f4       	brne	.+14     	; 0x6f0 <atoi+0x2c>
 6e2:	68 94       	set
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <atoi+0x2a>
 6e6:	0e 94 a1 03 	call	0x742	; 0x742 <__mulhi_const_10>
 6ea:	82 0f       	add	r24, r18
 6ec:	91 1d       	adc	r25, r1
 6ee:	21 91       	ld	r18, Z+
 6f0:	20 53       	subi	r18, 0x30	; 48
 6f2:	2a 30       	cpi	r18, 0x0A	; 10
 6f4:	c0 f3       	brcs	.-16     	; 0x6e6 <atoi+0x22>
 6f6:	1e f4       	brtc	.+6      	; 0x6fe <atoi+0x3a>
 6f8:	90 95       	com	r25
 6fa:	81 95       	neg	r24
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <itoa>:
 700:	fb 01       	movw	r30, r22
 702:	9f 01       	movw	r18, r30
 704:	e8 94       	clt
 706:	42 30       	cpi	r20, 0x02	; 2
 708:	c4 f0       	brlt	.+48     	; 0x73a <itoa+0x3a>
 70a:	45 32       	cpi	r20, 0x25	; 37
 70c:	b4 f4       	brge	.+44     	; 0x73a <itoa+0x3a>
 70e:	4a 30       	cpi	r20, 0x0A	; 10
 710:	29 f4       	brne	.+10     	; 0x71c <itoa+0x1c>
 712:	97 fb       	bst	r25, 7
 714:	1e f4       	brtc	.+6      	; 0x71c <itoa+0x1c>
 716:	90 95       	com	r25
 718:	81 95       	neg	r24
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	64 2f       	mov	r22, r20
 71e:	77 27       	eor	r23, r23
 720:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 724:	80 5d       	subi	r24, 0xD0	; 208
 726:	8a 33       	cpi	r24, 0x3A	; 58
 728:	0c f0       	brlt	.+2      	; 0x72c <itoa+0x2c>
 72a:	89 5d       	subi	r24, 0xD9	; 217
 72c:	81 93       	st	Z+, r24
 72e:	cb 01       	movw	r24, r22
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	a1 f7       	brne	.-24     	; 0x71c <itoa+0x1c>
 734:	16 f4       	brtc	.+4      	; 0x73a <itoa+0x3a>
 736:	5d e2       	ldi	r21, 0x2D	; 45
 738:	51 93       	st	Z+, r21
 73a:	10 82       	st	Z, r1
 73c:	c9 01       	movw	r24, r18
 73e:	0c 94 a9 03 	jmp	0x752	; 0x752 <strrev>

00000742 <__mulhi_const_10>:
 742:	7a e0       	ldi	r23, 0x0A	; 10
 744:	97 9f       	mul	r25, r23
 746:	90 2d       	mov	r25, r0
 748:	87 9f       	mul	r24, r23
 74a:	80 2d       	mov	r24, r0
 74c:	91 0d       	add	r25, r1
 74e:	11 24       	eor	r1, r1
 750:	08 95       	ret

00000752 <strrev>:
 752:	dc 01       	movw	r26, r24
 754:	fc 01       	movw	r30, r24
 756:	67 2f       	mov	r22, r23
 758:	71 91       	ld	r23, Z+
 75a:	77 23       	and	r23, r23
 75c:	e1 f7       	brne	.-8      	; 0x756 <strrev+0x4>
 75e:	32 97       	sbiw	r30, 0x02	; 2
 760:	04 c0       	rjmp	.+8      	; 0x76a <strrev+0x18>
 762:	7c 91       	ld	r23, X
 764:	6d 93       	st	X+, r22
 766:	70 83       	st	Z, r23
 768:	62 91       	ld	r22, -Z
 76a:	ae 17       	cp	r26, r30
 76c:	bf 07       	cpc	r27, r31
 76e:	c8 f3       	brcs	.-14     	; 0x762 <strrev+0x10>
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
