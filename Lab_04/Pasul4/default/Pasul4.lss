
Pasul4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000026  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000138  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c7  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000106  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ac  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000010d  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 00 	jmp	0x5e	; 0x5e <__ctors_end>
   4:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
   8:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
   c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  10:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  14:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  18:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  1c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  20:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  24:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  28:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  2c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  30:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  34:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  38:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  3c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  40:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  44:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  48:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  4c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  50:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>

00000054 <segLUT>:
  54:	81 cf 92 86 cc a4 a0 8f 80 84                       ..........

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d4 e0       	ldi	r29, 0x04	; 4
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61
  6a:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  6e:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000072 <__bad_interrupt>:
  72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000076 <main>:
//-----------------
   0b10000000, //8
   0b10000100  //9
};

int main(){
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	00 d0       	rcall	.+0      	; 0x7c <main+0x6>
  7c:	00 d0       	rcall	.+0      	; 0x7e <main+0x8>
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
   unsigned char inputs;
   volatile long i = 0;
  82:	19 82       	std	Y+1, r1	; 0x01
  84:	1a 82       	std	Y+2, r1	; 0x02
  86:	1b 82       	std	Y+3, r1	; 0x03
  88:	1c 82       	std	Y+4, r1	; 0x04
   unsigned char counter = 0;

   DDRA = 0xff;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0;
  8e:	17 ba       	out	0x17, r1	; 23
  90:	20 e0       	ldi	r18, 0x00	; 0

      if ( !(inputs & 1<<4) ){
         if (inputs < 10)
            PORTA = pgm_read_byte (&segLUT[inputs]);
         else
            PORTA = 0b11111110;
  92:	3e ef       	ldi	r19, 0xFE	; 254

   DDRA = 0xff;
   DDRB = 0;

   while(1){
      inputs = PINB & 0b00011111;
  94:	86 b3       	in	r24, 0x16	; 22
  96:	8f 71       	andi	r24, 0x1F	; 31

      if ( !(inputs & 1<<4) ){
  98:	e8 2f       	mov	r30, r24
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	84 fd       	sbrc	r24, 4
  9e:	0a c0       	rjmp	.+20     	; 0xb4 <main+0x3e>
         if (inputs < 10)
  a0:	8a 30       	cpi	r24, 0x0A	; 10
  a2:	28 f4       	brcc	.+10     	; 0xae <main+0x38>
            PORTA = pgm_read_byte (&segLUT[inputs]);
  a4:	ec 5a       	subi	r30, 0xAC	; 172
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	84 91       	lpm	r24, Z+
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x3a>
         else
            PORTA = 0b11111110;
  ae:	3b bb       	out	0x1b, r19	; 27
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x1e>

         counter = 0;
      }
      else{
         i++;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	ab 81       	ldd	r26, Y+3	; 0x03
  ba:	bc 81       	ldd	r27, Y+4	; 0x04
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	a1 1d       	adc	r26, r1
  c0:	b1 1d       	adc	r27, r1
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	ab 83       	std	Y+3, r26	; 0x03
  c8:	bc 83       	std	Y+4, r27	; 0x04
         
         if (i == P){
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	ab 81       	ldd	r26, Y+3	; 0x03
  d0:	bc 81       	ldd	r27, Y+4	; 0x04
  d2:	88 54       	subi	r24, 0x48	; 72
  d4:	98 4e       	sbci	r25, 0xE8	; 232
  d6:	a1 40       	sbci	r26, 0x01	; 1
  d8:	b0 40       	sbci	r27, 0x00	; 0
  da:	e1 f6       	brne	.-72     	; 0x94 <main+0x1e>
            PORTA = pgm_read_byte (&segLUT[counter]);
  dc:	e2 2f       	mov	r30, r18
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ec 5a       	subi	r30, 0xAC	; 172
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	e4 91       	lpm	r30, Z+
  e6:	eb bb       	out	0x1b, r30	; 27
            counter++;
  e8:	2f 5f       	subi	r18, 0xFF	; 255
              
            if (counter > 9)
  ea:	2a 30       	cpi	r18, 0x0A	; 10
  ec:	08 f0       	brcs	.+2      	; 0xf0 <main+0x7a>
  ee:	20 e0       	ldi	r18, 0x00	; 0
               counter = 0;
         
            i = 0;
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	1a 82       	std	Y+2, r1	; 0x02
  f4:	1b 82       	std	Y+3, r1	; 0x03
  f6:	1c 82       	std	Y+4, r1	; 0x04
  f8:	cd cf       	rjmp	.-102    	; 0x94 <main+0x1e>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
