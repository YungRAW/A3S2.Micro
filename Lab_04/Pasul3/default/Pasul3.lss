
Pasul3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000026  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f0  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a6  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c6  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a4  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000046  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2f 00 	jmp	0x5e	; 0x5e <__ctors_end>
   4:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
   8:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
   c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  10:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  14:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  18:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  1c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  20:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  24:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  28:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  2c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  30:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  34:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  38:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  3c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  40:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  44:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  48:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  4c:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>
  50:	0c 94 39 00 	jmp	0x72	; 0x72 <__bad_interrupt>

00000054 <segLUT>:
  54:	81 cf 92 86 cc a4 a0 8f 80 84                       ..........

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d4 e0       	ldi	r29, 0x04	; 4
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61
  6a:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  6e:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000072 <__bad_interrupt>:
  72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000076 <main>:
};

int main(){
   unsigned char inputs;

   DDRA = 0xff;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0;
  7a:	17 ba       	out	0x17, r1	; 23
      inputs = PINB & 0b00001111;

      if (inputs < 10)
         PORTA = pgm_read_byte (&segLUT[inputs]);
      else
         PORTA = 0b11111110;
  7c:	8e ef       	ldi	r24, 0xFE	; 254

   DDRA = 0xff;
   DDRB = 0;

   while(1){
      inputs = PINB & 0b00001111;
  7e:	e6 b3       	in	r30, 0x16	; 22
  80:	ef 70       	andi	r30, 0x0F	; 15

      if (inputs < 10)
  82:	ea 30       	cpi	r30, 0x0A	; 10
  84:	30 f4       	brcc	.+12     	; 0x92 <main+0x1c>
         PORTA = pgm_read_byte (&segLUT[inputs]);
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	ec 5a       	subi	r30, 0xAC	; 172
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	e4 91       	lpm	r30, Z+
  8e:	eb bb       	out	0x1b, r30	; 27
  90:	f6 cf       	rjmp	.-20     	; 0x7e <main+0x8>
      else
         PORTA = 0b11111110;
  92:	8b bb       	out	0x1b, r24	; 27
  94:	f4 cf       	rjmp	.-24     	; 0x7e <main+0x8>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
