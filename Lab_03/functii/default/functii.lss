
functii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c5  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000077  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ae  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000086  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000029  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
    // bit   7 6 5 4   3  2  1  0    
    // outs= - - - -   -  f2 f1 f0    
    unsigned char outs;    
    unsigned char temp; 
   
    DDRA = 0b11111111; //sau DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0b00000000; //sau DDRB = 0x00;
  70:	17 ba       	out	0x17, r1	; 23
   
    while (1){
		//memoreaza valorile variabilelor de intrare       
		//bit      7654 3 2  1  0       
		//inputs =        x2  x1  x0
	    inputs = PINB;
  72:	96 b3       	in	r25, 0x16	; 22
	    inputs &= 0b00001111;
  74:	39 2f       	mov	r19, r25
  76:	3f 70       	andi	r19, 0x0F	; 15
  78:	83 2f       	mov	r24, r19
  7a:	86 95       	lsr	r24
  7c:	23 2f       	mov	r18, r19
  7e:	26 95       	lsr	r18
  80:	26 95       	lsr	r18
  82:	28 27       	eor	r18, r24
  84:	29 27       	eor	r18, r25
  86:	21 70       	andi	r18, 0x01	; 1
  88:	83 2f       	mov	r24, r19
  8a:	86 95       	lsr	r24
  8c:	86 95       	lsr	r24
  8e:	86 95       	lsr	r24
  90:	28 27       	eor	r18, r24
	    temp = x3 ^ x2 ^ x1 ^ x0;
	    if (temp & 1<<0)
		    outs |= 0b00000001;
	   
	    //f1
	    if (inputs < 3)
  92:	33 30       	cpi	r19, 0x03	; 3
  94:	08 f4       	brcc	.+2      	; 0x98 <main+0x2c>
			 outs |= 0b00000010;
  96:	22 60       	ori	r18, 0x02	; 2
		
		//f2
		//temp = (x2 & x0) | (~x2 & x1);
		if (inputs == 2 || inputs == 3 || inputs == 5 || inputs == 7 || inputs == 11 || inputs == 13)
  98:	83 2f       	mov	r24, r19
  9a:	82 50       	subi	r24, 0x02	; 2
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	40 f0       	brcs	.+16     	; 0xb0 <main+0x44>
  a0:	35 30       	cpi	r19, 0x05	; 5
  a2:	31 f0       	breq	.+12     	; 0xb0 <main+0x44>
  a4:	37 30       	cpi	r19, 0x07	; 7
  a6:	21 f0       	breq	.+8      	; 0xb0 <main+0x44>
  a8:	3b 30       	cpi	r19, 0x0B	; 11
  aa:	11 f0       	breq	.+4      	; 0xb0 <main+0x44>
  ac:	3d 30       	cpi	r19, 0x0D	; 13
  ae:	29 f4       	brne	.+10     	; 0xba <main+0x4e>
			outs |= 0b00000100;
  b0:	24 60       	ori	r18, 0x04	; 4

      if (inputs == 7 || inputs == 11 || inputs > 12)
  b2:	37 30       	cpi	r19, 0x07	; 7
  b4:	21 f0       	breq	.+8      	; 0xbe <main+0x52>
  b6:	3b 30       	cpi	r19, 0x0B	; 11
  b8:	11 f0       	breq	.+4      	; 0xbe <main+0x52>
  ba:	3d 30       	cpi	r19, 0x0D	; 13
  bc:	08 f0       	brcs	.+2      	; 0xc0 <main+0x54>
         outs |= 0b00001000;
  be:	28 60       	ori	r18, 0x08	; 8
		
		PORTA = outs;
  c0:	2b bb       	out	0x1b, r18	; 27
  c2:	d7 cf       	rjmp	.-82     	; 0x72 <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
