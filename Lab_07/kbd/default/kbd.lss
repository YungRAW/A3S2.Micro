
kbd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800072  00800072  000004b4  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c2  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a7  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000256  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000573  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ae  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000263  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "defs.h"

#define DELAY 200

int main(){
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
   unsigned char kbhit = 0;
   char kbcode; 
 
   unsigned char loop_cnt=0;
   
   sysinit();
  96:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sysinit>
  9a:	0f e7       	ldi	r16, 0x7F	; 127
  9c:	80 e0       	ldi	r24, 0x00	; 0

   while(1){  //bucla principala

      if(loop_cnt==DELAY){ //citirile se fac din 15 ms in 15 ms
  9e:	88 3c       	cpi	r24, 0xC8	; 200
  a0:	49 f4       	brne	.+18     	; 0xb4 <main+0x22>
         loop_cnt=0; 
 
         code_ante = code_now;
         code_now  = kbscan();
  a2:	0e 94 a7 01 	call	0x34e	; 0x34e <kbscan>
  a6:	18 2f       	mov	r17, r24

         if( code_ante == NOKEY && code_now != NOKEY){
  a8:	0f 37       	cpi	r16, 0x7F	; 127
  aa:	11 f4       	brne	.+4      	; 0xb0 <main+0x1e>
  ac:	8f 37       	cpi	r24, 0x7F	; 127
  ae:	31 f4       	brne	.+12     	; 0xbc <main+0x2a>
  b0:	01 2f       	mov	r16, r17
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	10 2f       	mov	r17, r16
         putchLCD(kbcode);
      }       //……       
      
      //PORTB &= 0<<1;

      loop_cnt++;
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	01 2f       	mov	r16, r17
  ba:	f1 cf       	rjmp	.-30     	; 0x9e <main+0xc>
      }
      
      //consuma codul
      if(kbhit){
         kbhit=0;          
         putchLCD(kbcode);
  bc:	0e 94 24 01 	call	0x248	; 0x248 <putchLCD>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	f9 cf       	rjmp	.-14     	; 0xb6 <main+0x24>

000000c4 <wait>:
#define SReg 0
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
  c4:	9b 01       	movw	r18, r22
  c6:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  c8:	10 92 72 00 	sts	0x0072, r1
  cc:	10 92 73 00 	sts	0x0073, r1
  d0:	10 92 74 00 	sts	0x0074, r1
  d4:	10 92 75 00 	sts	0x0075, r1
  d8:	13 c0       	rjmp	.+38     	; 0x100 <wait+0x3c>
  da:	80 91 72 00 	lds	r24, 0x0072
  de:	90 91 73 00 	lds	r25, 0x0073
  e2:	a0 91 74 00 	lds	r26, 0x0074
  e6:	b0 91 75 00 	lds	r27, 0x0075
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	a1 1d       	adc	r26, r1
  ee:	b1 1d       	adc	r27, r1
  f0:	80 93 72 00 	sts	0x0072, r24
  f4:	90 93 73 00 	sts	0x0073, r25
  f8:	a0 93 74 00 	sts	0x0074, r26
  fc:	b0 93 75 00 	sts	0x0075, r27
 100:	80 91 72 00 	lds	r24, 0x0072
 104:	90 91 73 00 	lds	r25, 0x0073
 108:	a0 91 74 00 	lds	r26, 0x0074
 10c:	b0 91 75 00 	lds	r27, 0x0075
 110:	82 17       	cp	r24, r18
 112:	93 07       	cpc	r25, r19
 114:	a4 07       	cpc	r26, r20
 116:	b5 07       	cpc	r27, r21
 118:	00 f3       	brcs	.-64     	; 0xda <wait+0x16>
}
 11a:	08 95       	ret

0000011c <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   
   DDRD = 0b00000000;
 11c:	11 ba       	out	0x11, r1	; 17

   if (vRS == 0)
 11e:	88 23       	and	r24, r24
 120:	11 f4       	brne	.+4      	; 0x126 <rd_LCDreg+0xa>
      clrbit(PORTB, RS); //RS = '0'
 122:	c5 98       	cbi	0x18, 5	; 24
 124:	01 c0       	rjmp	.+2      	; 0x128 <rd_LCDreg+0xc>
   else
      setbit(PORTB, RS); //RS = '1'
 126:	c5 9a       	sbi	0x18, 5	; 24

   setbit(PORTB, RW); //RW = '1'
 128:	c6 9a       	sbi	0x18, 6	; 24

   nop;
 12a:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 12c:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 136:	00 00       	nop

   data = PIND;
 138:	80 b3       	in	r24, 0x10	; 16

   clrbit(PORTB, E); //E = '0'
 13a:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 13c:	00 00       	nop

   DDRD = 0b11111111;
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	91 bb       	out	0x11, r25	; 17

   return data;
}
 142:	08 95       	ret

00000144 <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if (vRS == 0)
 144:	88 23       	and	r24, r24
 146:	11 f4       	brne	.+4      	; 0x14c <wr_LCDreg+0x8>
      clrbit(PORTB, RS); //RS = '0'
 148:	c5 98       	cbi	0x18, 5	; 24
 14a:	01 c0       	rjmp	.+2      	; 0x14e <wr_LCDreg+0xa>
   else
      setbit(PORTB, RS); //RS = '1'
 14c:	c5 9a       	sbi	0x18, 5	; 24

   clrbit(PORTB, RW); //RW = '0'
 14e:	c6 98       	cbi	0x18, 6	; 24

   PORTD = data;
 150:	62 bb       	out	0x12, r22	; 18

   nop;
 152:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 154:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 15e:	00 00       	nop

   clrbit(PORTB, E); //E = '0'
 160:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 162:	00 00       	nop
}
 164:	08 95       	ret

00000166 <ckbf>:


void ckbf(){
   
   while(rd_LCDreg(SReg) & 1<<7){}
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 16c:	87 fd       	sbrc	r24, 7
 16e:	fb cf       	rjmp	.-10     	; 0x166 <ckbf>
}
 170:	08 95       	ret

00000172 <initLCD>:

void initLCD(){
   ckbf();
 172:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 - - -
   wr_LCDreg(IReg, 0b00111000);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	68 e3       	ldi	r22, 0x38	; 56
 17a:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 17e:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Entry mode set
   //bit 7 6 5 4   3 2   1 0
   //    0 0 0 0   0 1 I/D S
   //    0 0 0 0   0 1   1 0
   wr_LCDreg(IReg, 0b00000110);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 18a:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	6f e0       	ldi	r22, 0x0F	; 15
 192:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 196:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 1a2:	08 95       	ret

000001a4 <sysinit>:

void sysinit(){
   PORTB = 0b00000000;
 1a4:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100010;
 1a6:	82 ee       	ldi	r24, 0xE2	; 226
 1a8:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0b11111111;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	81 bb       	out	0x11, r24	; 17
   PORTA = 0;
 1ae:	1b ba       	out	0x1b, r1	; 27
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 1b0:	10 92 72 00 	sts	0x0072, r1
 1b4:	10 92 73 00 	sts	0x0073, r1
 1b8:	10 92 74 00 	sts	0x0074, r1
 1bc:	10 92 75 00 	sts	0x0075, r1
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <sysinit+0x44>
 1c2:	80 91 72 00 	lds	r24, 0x0072
 1c6:	90 91 73 00 	lds	r25, 0x0073
 1ca:	a0 91 74 00 	lds	r26, 0x0074
 1ce:	b0 91 75 00 	lds	r27, 0x0075
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 72 00 	sts	0x0072, r24
 1dc:	90 93 73 00 	sts	0x0073, r25
 1e0:	a0 93 74 00 	sts	0x0074, r26
 1e4:	b0 93 75 00 	sts	0x0075, r27
 1e8:	80 91 72 00 	lds	r24, 0x0072
 1ec:	90 91 73 00 	lds	r25, 0x0073
 1f0:	a0 91 74 00 	lds	r26, 0x0074
 1f4:	b0 91 75 00 	lds	r27, 0x0075
 1f8:	80 5c       	subi	r24, 0xC0	; 192
 1fa:	94 4d       	sbci	r25, 0xD4	; 212
 1fc:	a1 40       	sbci	r26, 0x01	; 1
 1fe:	b0 40       	sbci	r27, 0x00	; 0
 200:	00 f3       	brcs	.-64     	; 0x1c2 <sysinit+0x1e>
   PORTB = 0b00000000;
   DDRB  = 0b11100010;
   DDRD  = 0b11111111;
   PORTA = 0;
   wait(120000UL);
   initLCD();
 202:	0e 94 b9 00 	call	0x172	; 0x172 <initLCD>
}
 206:	08 95       	ret

00000208 <clrLCD>:
}
*/

//Pasul 3
void clrLCD(){
   ckbf();
 208:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 214:	08 95       	ret

00000216 <gotoLC>:

//Pasul 4
void gotoLC(unsigned char line, unsigned char col){
 216:	1f 93       	push	r17
 218:	16 2f       	mov	r17, r22
   unsigned char position = 0;

   if(line == 1 && col < 17){
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	39 f4       	brne	.+14     	; 0x22c <gotoLC+0x16>
 21e:	61 31       	cpi	r22, 0x11	; 17
 220:	88 f4       	brcc	.+34     	; 0x244 <gotoLC+0x2e>
      position |= 1<<7;
      position |= col - 1;

      ckbf();
 222:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   0   0   0   col col col col
      wr_LCDreg(IReg, position);
 226:	11 50       	subi	r17, 0x01	; 1
 228:	10 68       	ori	r17, 0x80	; 128
 22a:	08 c0       	rjmp	.+16     	; 0x23c <gotoLC+0x26>
   }
   else if(line == 2 && col < 17){
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	51 f4       	brne	.+20     	; 0x244 <gotoLC+0x2e>
 230:	61 31       	cpi	r22, 0x11	; 17
 232:	40 f4       	brcc	.+16     	; 0x244 <gotoLC+0x2e>
      position |= 1<<6 | 1<<7;
      position |= col - 1;

      ckbf();
 234:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
      // Set DDRAM address
      //bit 7   6   5   4     3   2   1   0
      //    1 ADD ADD ADD   ADD ADD ADD ADD
      //    1   1   0   0   col col col col
      wr_LCDreg(IReg, position);
 238:	11 50       	subi	r17, 0x01	; 1
 23a:	10 6c       	ori	r17, 0xC0	; 192
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	61 2f       	mov	r22, r17
 240:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
   }
}
 244:	1f 91       	pop	r17
 246:	08 95       	ret

00000248 <putchLCD>:
   wait(120000UL);
   initLCD();
}

//Pasul 1
void putchLCD( char ch){
 248:	1f 93       	push	r17
 24a:	18 2f       	mov	r17, r24
   ckbf();
 24c:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, ch);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	61 2f       	mov	r22, r17
 254:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 258:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 25c:	85 e1       	ldi	r24, 0x15	; 21
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <putchLCD+0x16>
   _delay_us(8);

   //0x10 == 16
   if(rd_LCDreg(SReg) == 0x10)
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 268:	80 31       	cpi	r24, 0x10	; 16
 26a:	21 f4       	brne	.+8      	; 0x274 <putchLCD+0x2c>
      gotoLC(2,1);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 0b 01 	call	0x216	; 0x216 <gotoLC>

   //0x50 == 80
   if(rd_LCDreg(SReg) == 0x50)
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 27a:	80 35       	cpi	r24, 0x50	; 80
 27c:	21 f4       	brne	.+8      	; 0x286 <putchLCD+0x3e>
      gotoLC(1,1);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	0e 94 0b 01 	call	0x216	; 0x216 <gotoLC>
}
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <putsLCD>:
      wr_LCDreg(IReg, position);
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	15 e1       	ldi	r17, 0x15	; 21
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <putsLCD+0x48>
   while(*ch){
      ckbf();
 296:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
      wr_LCDreg(DReg, *ch++);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	68 81       	ld	r22, Y
 29e:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
      
      ckbf();
 2a2:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
 2a6:	81 2f       	mov	r24, r17
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <putsLCD+0x1e>
      _delay_us(8);

      //0x10 == 16
      if(rd_LCDreg(SReg) == 0x10)
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 2b2:	80 31       	cpi	r24, 0x10	; 16
 2b4:	21 f4       	brne	.+8      	; 0x2be <putsLCD+0x34>
         gotoLC(2,1);
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	0e 94 0b 01 	call	0x216	; 0x216 <gotoLC>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 2c4:	80 35       	cpi	r24, 0x50	; 80
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <putsLCD+0x46>
         gotoLC(1,1);
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	0e 94 0b 01 	call	0x216	; 0x216 <gotoLC>

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
      ckbf();
      wr_LCDreg(DReg, *ch++);
 2d0:	21 96       	adiw	r28, 0x01	; 1
   }
}

//Pasul 5: Wrap
void putsLCD( char* ch){
   while(*ch){
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	f9 f6       	brne	.-66     	; 0x296 <putsLCD+0xc>

      //0x50 == 80
      if(rd_LCDreg(SReg) == 0x50)
         gotoLC(1,1);
   }
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <smiley>:

//Pasul 6: Smiley
void smiley(){
   ckbf();
 2e0:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Set CGRAM address
   //bit 7 6   5   4     3   2   1   0
   //    0 1 ACG ACG   ACG ACG ACG ACG
   //    0 1   0   1     0   0   0   0
   wr_LCDreg(IReg, 0b01010000);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	60 e5       	ldi	r22, 0x50	; 80
 2e8:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 2ec:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	60 e4       	ldi	r22, 0x40	; 64
 2f4:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 2f8:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01001010); //line 2
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	6a e4       	ldi	r22, 0x4A	; 74
 300:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 304:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 3
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	60 e4       	ldi	r22, 0x40	; 64
 30c:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 310:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01000100); //line 4
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	64 e4       	ldi	r22, 0x44	; 68
 318:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 31c:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01010001); //line 5
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	61 e5       	ldi	r22, 0x51	; 81
 324:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 328:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01001110); //line 6
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	6e e4       	ldi	r22, 0x4E	; 78
 330:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 334:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 7
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	60 e4       	ldi	r22, 0x40	; 64
 33c:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 340:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, 0b01000000); //line 8
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	60 e4       	ldi	r22, 0x40	; 64
 348:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 34c:	08 95       	ret

0000034e <kbscan>:

char kbscan(){
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	61 97       	sbiw	r28, 0x11	; 17
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	0c c0       	rjmp	.+24     	; 0x37e <kbscan+0x30>
	...
      nop; nop; nop; nop; nop; nop;

      cols = ~PINA;
 372:	29 b3       	in	r18, 0x19	; 25
 374:	20 95       	com	r18

      cols &= 0x0f;
 376:	2f 70       	andi	r18, 0x0F	; 15

      if (cols != 0)
 378:	51 f4       	brne	.+20     	; 0x38e <kbscan+0x40>
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 
   for( DDRA = 1<<4; DDRA > 0; DDRA <<=1 ) {
 37a:	8a b3       	in	r24, 0x1a	; 26
 37c:	88 0f       	add	r24, r24
 37e:	8a bb       	out	0x1a, r24	; 26
 380:	8a b3       	in	r24, 0x1a	; 26
 382:	88 23       	and	r24, r24
 384:	81 f7       	brne	.-32     	; 0x366 <kbscan+0x18>
      if (cols != 0)
         break;
   }//end for

   if (cols == 0){
      PORTB &= 0<<1;
 386:	88 b3       	in	r24, 0x18	; 24
 388:	18 ba       	out	0x18, r1	; 24
 38a:	8f e7       	ldi	r24, 0x7F	; 127
 38c:	35 c0       	rjmp	.+106    	; 0x3f8 <kbscan+0xaa>
      return NOKEY;
   }

   temp = DDRA;
 38e:	3a b3       	in	r19, 0x1a	; 26

   if (temp & 1<<4)
 390:	83 2f       	mov	r24, r19
 392:	90 e0       	ldi	r25, 0x00	; 0
      lia = 0;

   if (temp & 1<<5)
      lia = 1;

   if (temp & 1<<6)
 394:	36 ff       	sbrs	r19, 6
 396:	02 c0       	rjmp	.+4      	; 0x39c <kbscan+0x4e>
 398:	92 e0       	ldi	r25, 0x02	; 2
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <kbscan+0x5c>
 39c:	45 e0       	ldi	r20, 0x05	; 5
 39e:	96 95       	lsr	r25
 3a0:	87 95       	ror	r24
 3a2:	4a 95       	dec	r20
 3a4:	e1 f7       	brne	.-8      	; 0x39e <kbscan+0x50>
 3a6:	98 2f       	mov	r25, r24
 3a8:	91 70       	andi	r25, 0x01	; 1
      lia = 2;

   if (temp & 1<<7)
 3aa:	37 fd       	sbrc	r19, 7
 3ac:	93 e0       	ldi	r25, 0x03	; 3
      lia = 3;

   if (cols & 1<<0){
 3ae:	20 fd       	sbrc	r18, 0
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <kbscan+0x7c>
      cola = 0;
   }
   else if (cols & 1<<1){
 3b2:	21 ff       	sbrs	r18, 1
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <kbscan+0x6c>
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <kbscan+0x7e>
      cola = 1;
   }
   else if (cols & 1<<2){
 3ba:	22 ff       	sbrs	r18, 2
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <kbscan+0x74>
 3be:	22 e0       	ldi	r18, 0x02	; 2
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <kbscan+0x7e>
      cola = 2;
   }
   else if (cols & 1<<3){
 3c2:	23 ff       	sbrs	r18, 3
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <kbscan+0x7c>
 3c6:	23 e0       	ldi	r18, 0x03	; 3
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <kbscan+0x7e>
 3ca:	20 e0       	ldi	r18, 0x00	; 0
   unsigned char lia=0;  //linia activa
   unsigned char cola=0; //coloana activa 
 
   unsigned char cod_intern;
   char cod_extern;
   char tabela_trans[] = "123A456B789C*0#D";
 3cc:	de 01       	movw	r26, r28
 3ce:	11 96       	adiw	r26, 0x01	; 1
 3d0:	e0 e6       	ldi	r30, 0x60	; 96
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	81 e1       	ldi	r24, 0x11	; 17
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <kbscan+0x88>
      cola = 3;
   }

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];
 3de:	99 0f       	add	r25, r25
 3e0:	99 0f       	add	r25, r25
 3e2:	92 0f       	add	r25, r18
 3e4:	fe 01       	movw	r30, r28
 3e6:	e9 0f       	add	r30, r25
 3e8:	f1 1d       	adc	r31, r1
 3ea:	81 81       	ldd	r24, Z+1	; 0x01

   while(cod_extern == '*' || cod_extern == '#'){
 3ec:	8a 32       	cpi	r24, 0x2A	; 42
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <kbscan+0xa6>
      PORTB |= 0x02;
 3f0:	c1 9a       	sbi	0x18, 1	; 24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <kbscan+0xaa>

   cod_intern = lia * 4 + cola;

   cod_extern = tabela_trans[cod_intern];

   while(cod_extern == '*' || cod_extern == '#'){
 3f4:	83 32       	cpi	r24, 0x23	; 35
 3f6:	e1 f3       	breq	.-8      	; 0x3f0 <kbscan+0xa2>
      PORTB |= 0x02;
      return cod_extern;
   }

   return cod_extern;
}//end kbscan
 3f8:	61 96       	adiw	r28, 0x11	; 17
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
