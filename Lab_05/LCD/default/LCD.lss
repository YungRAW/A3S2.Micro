
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000023c  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e3  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000163  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000234  00000000  00000000  0000063f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b4  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005a  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <wait>:
#define SReg 0
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
  7c:	9b 01       	movw	r18, r22
  7e:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  80:	10 92 60 00 	sts	0x0060, r1
  84:	10 92 61 00 	sts	0x0061, r1
  88:	10 92 62 00 	sts	0x0062, r1
  8c:	10 92 63 00 	sts	0x0063, r1
  90:	13 c0       	rjmp	.+38     	; 0xb8 <wait+0x3c>
  92:	80 91 60 00 	lds	r24, 0x0060
  96:	90 91 61 00 	lds	r25, 0x0061
  9a:	a0 91 62 00 	lds	r26, 0x0062
  9e:	b0 91 63 00 	lds	r27, 0x0063
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	a1 1d       	adc	r26, r1
  a6:	b1 1d       	adc	r27, r1
  a8:	80 93 60 00 	sts	0x0060, r24
  ac:	90 93 61 00 	sts	0x0061, r25
  b0:	a0 93 62 00 	sts	0x0062, r26
  b4:	b0 93 63 00 	sts	0x0063, r27
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	90 91 61 00 	lds	r25, 0x0061
  c0:	a0 91 62 00 	lds	r26, 0x0062
  c4:	b0 91 63 00 	lds	r27, 0x0063
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	a4 07       	cpc	r26, r20
  ce:	b5 07       	cpc	r27, r21
  d0:	00 f3       	brcs	.-64     	; 0x92 <wait+0x16>
}
  d2:	08 95       	ret

000000d4 <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   
   DDRD = 0b00000000;
  d4:	11 ba       	out	0x11, r1	; 17

   if (vRS == 0)
  d6:	88 23       	and	r24, r24
  d8:	11 f4       	brne	.+4      	; 0xde <rd_LCDreg+0xa>
      clrbit(PORTB, RS); //RS = '0'
  da:	c5 98       	cbi	0x18, 5	; 24
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <rd_LCDreg+0xc>
   else
      setbit(PORTB, RS); //RS = '1'
  de:	c5 9a       	sbi	0x18, 5	; 24

   setbit(PORTB, RW); //RW = '1'
  e0:	c6 9a       	sbi	0x18, 6	; 24

   nop;
  e2:	00 00       	nop

   setbit(PORTB, E); //E = '1'
  e4:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
  ee:	00 00       	nop

   data = PIND;
  f0:	80 b3       	in	r24, 0x10	; 16

   clrbit(PORTB, E); //E = '0'
  f2:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
  f4:	00 00       	nop

   DDRD = 0b11111111;
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	91 bb       	out	0x11, r25	; 17

   return data;
}
  fa:	08 95       	ret

000000fc <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if (vRS == 0)
  fc:	88 23       	and	r24, r24
  fe:	11 f4       	brne	.+4      	; 0x104 <wr_LCDreg+0x8>
      clrbit(PORTB, RS); //RS = '0'
 100:	c5 98       	cbi	0x18, 5	; 24
 102:	01 c0       	rjmp	.+2      	; 0x106 <wr_LCDreg+0xa>
   else
      setbit(PORTB, RS); //RS = '1'
 104:	c5 9a       	sbi	0x18, 5	; 24

   clrbit(PORTB, RW); //RW = '0'
 106:	c6 98       	cbi	0x18, 6	; 24

   PORTD = data;
 108:	62 bb       	out	0x12, r22	; 18

   nop;
 10a:	00 00       	nop

   setbit(PORTB, E); //E = '1'
 10c:	c7 9a       	sbi	0x18, 7	; 24
	...

   nop; nop; nop; nop; nop;
 116:	00 00       	nop

   clrbit(PORTB, E); //E = '0'
 118:	c7 98       	cbi	0x18, 7	; 24
   
   nop;
 11a:	00 00       	nop
}
 11c:	08 95       	ret

0000011e <ckbf>:


void ckbf(){
   
   while(rd_LCDreg(SReg) & 1<<7){}
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 6a 00 	call	0xd4	; 0xd4 <rd_LCDreg>
 124:	87 fd       	sbrc	r24, 7
 126:	fb cf       	rjmp	.-10     	; 0x11e <ckbf>
}
 128:	08 95       	ret

0000012a <initLCD>:

void initLCD(){
   ckbf();
 12a:	0e 94 8f 00 	call	0x11e	; 0x11e <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 - - -
   wr_LCDreg(IReg, 0b00111000);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	68 e3       	ldi	r22, 0x38	; 56
 132:	0e 94 7e 00 	call	0xfc	; 0xfc <wr_LCDreg>

   ckbf();
 136:	0e 94 8f 00 	call	0x11e	; 0x11e <ckbf>
   // Entry mode set
   //bit 7 6 5 4   3 2   1 0
   //    0 0 0 0   0 1 I/D S
   //    0 0 0 0   0 1   1 0
   wr_LCDreg(IReg, 0b00000110);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	66 e0       	ldi	r22, 0x06	; 6
 13e:	0e 94 7e 00 	call	0xfc	; 0xfc <wr_LCDreg>

   ckbf();
 142:	0e 94 8f 00 	call	0x11e	; 0x11e <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	6f e0       	ldi	r22, 0x0F	; 15
 14a:	0e 94 7e 00 	call	0xfc	; 0xfc <wr_LCDreg>

   ckbf();
 14e:	0e 94 8f 00 	call	0x11e	; 0x11e <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1
   wr_LCDreg(IReg, 0x01);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	0e 94 7e 00 	call	0xfc	; 0xfc <wr_LCDreg>
}
 15a:	08 95       	ret

0000015c <sysinit>:

void sysinit(){
   PORTB = 0b00000000;
 15c:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100000;
 15e:	80 ee       	ldi	r24, 0xE0	; 224
 160:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0b11111111;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	81 bb       	out	0x11, r24	; 17
#define DReg 1

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 166:	10 92 60 00 	sts	0x0060, r1
 16a:	10 92 61 00 	sts	0x0061, r1
 16e:	10 92 62 00 	sts	0x0062, r1
 172:	10 92 63 00 	sts	0x0063, r1
 176:	13 c0       	rjmp	.+38     	; 0x19e <sysinit+0x42>
 178:	80 91 60 00 	lds	r24, 0x0060
 17c:	90 91 61 00 	lds	r25, 0x0061
 180:	a0 91 62 00 	lds	r26, 0x0062
 184:	b0 91 63 00 	lds	r27, 0x0063
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	a1 1d       	adc	r26, r1
 18c:	b1 1d       	adc	r27, r1
 18e:	80 93 60 00 	sts	0x0060, r24
 192:	90 93 61 00 	sts	0x0061, r25
 196:	a0 93 62 00 	sts	0x0062, r26
 19a:	b0 93 63 00 	sts	0x0063, r27
 19e:	80 91 60 00 	lds	r24, 0x0060
 1a2:	90 91 61 00 	lds	r25, 0x0061
 1a6:	a0 91 62 00 	lds	r26, 0x0062
 1aa:	b0 91 63 00 	lds	r27, 0x0063
 1ae:	80 5c       	subi	r24, 0xC0	; 192
 1b0:	94 4d       	sbci	r25, 0xD4	; 212
 1b2:	a1 40       	sbci	r26, 0x01	; 1
 1b4:	b0 40       	sbci	r27, 0x00	; 0
 1b6:	00 f3       	brcs	.-64     	; 0x178 <sysinit+0x1c>
void sysinit(){
   PORTB = 0b00000000;
   DDRB  = 0b11100000;
   DDRD  = 0b11111111;
   wait(120000UL);
   initLCD();
 1b8:	0e 94 95 00 	call	0x12a	; 0x12a <initLCD>
}
 1bc:	08 95       	ret

000001be <main>:
#include "defs.h"

int main(){
   sysinit();
 1be:	0e 94 ae 00 	call	0x15c	; 0x15c <sysinit>
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x4>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
